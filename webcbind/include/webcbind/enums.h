#pragma once

#include <emlite/emlite.h>
#include <jscbind/jscbind.h>
#include "enums.h"

#ifdef __cplusplus
extern "C" {
#endif

DECLARE_EMLITE_TYPE(SecurityPolicyViolationEventDisposition, em_Val);
SecurityPolicyViolationEventDisposition SecurityPolicyViolationEventDisposition_enforce();
SecurityPolicyViolationEventDisposition SecurityPolicyViolationEventDisposition_report();
DECLARE_EMLITE_TYPE(EndingType, em_Val);
EndingType EndingType_transparent();
EndingType EndingType_native();
DECLARE_EMLITE_TYPE(IDBRequestReadyState, em_Val);
IDBRequestReadyState IDBRequestReadyState_pending();
IDBRequestReadyState IDBRequestReadyState_done();
DECLARE_EMLITE_TYPE(IDBTransactionDurability, em_Val);
IDBTransactionDurability IDBTransactionDurability_default_();
IDBTransactionDurability IDBTransactionDurability_strict();
IDBTransactionDurability IDBTransactionDurability_relaxed();
DECLARE_EMLITE_TYPE(IDBCursorDirection, em_Val);
IDBCursorDirection IDBCursorDirection_next();
IDBCursorDirection IDBCursorDirection_nextunique();
IDBCursorDirection IDBCursorDirection_prev();
IDBCursorDirection IDBCursorDirection_prevunique();
DECLARE_EMLITE_TYPE(IDBTransactionMode, em_Val);
IDBTransactionMode IDBTransactionMode_readonly();
IDBTransactionMode IDBTransactionMode_readwrite();
IDBTransactionMode IDBTransactionMode_versionchange();
DECLARE_EMLITE_TYPE(AccelerometerLocalCoordinateSystem, em_Val);
AccelerometerLocalCoordinateSystem AccelerometerLocalCoordinateSystem_device();
AccelerometerLocalCoordinateSystem AccelerometerLocalCoordinateSystem_screen();
DECLARE_EMLITE_TYPE(AudioSessionType, em_Val);
AudioSessionType AudioSessionType_auto_();
AudioSessionType AudioSessionType_playback();
AudioSessionType AudioSessionType_transient();
AudioSessionType AudioSessionType_transient_solo();
AudioSessionType AudioSessionType_ambient();
AudioSessionType AudioSessionType_play_and_record();
DECLARE_EMLITE_TYPE(AudioSessionState, em_Val);
AudioSessionState AudioSessionState_inactive();
AudioSessionState AudioSessionState_active();
AudioSessionState AudioSessionState_interrupted();
DECLARE_EMLITE_TYPE(AutoplayPolicy, em_Val);
AutoplayPolicy AutoplayPolicy_allowed();
AutoplayPolicy AutoplayPolicy_allowed_muted();
AutoplayPolicy AutoplayPolicy_disallowed();
DECLARE_EMLITE_TYPE(AutoplayPolicyMediaType, em_Val);
AutoplayPolicyMediaType AutoplayPolicyMediaType_mediaelement();
AutoplayPolicyMediaType AutoplayPolicyMediaType_audiocontext();
DECLARE_EMLITE_TYPE(BackgroundFetchResult, em_Val);
BackgroundFetchResult BackgroundFetchResult_none();
BackgroundFetchResult BackgroundFetchResult_success();
BackgroundFetchResult BackgroundFetchResult_failure();
DECLARE_EMLITE_TYPE(BackgroundFetchFailureReason, em_Val);
BackgroundFetchFailureReason BackgroundFetchFailureReason_none();
BackgroundFetchFailureReason BackgroundFetchFailureReason_aborted();
BackgroundFetchFailureReason BackgroundFetchFailureReason_bad_status();
BackgroundFetchFailureReason BackgroundFetchFailureReason_fetch_error();
BackgroundFetchFailureReason BackgroundFetchFailureReason_quota_exceeded();
BackgroundFetchFailureReason BackgroundFetchFailureReason_download_total_exceeded();
DECLARE_EMLITE_TYPE(PresentationStyle, em_Val);
PresentationStyle PresentationStyle_unspecified();
PresentationStyle PresentationStyle_inline_();
PresentationStyle PresentationStyle_attachment();
DECLARE_EMLITE_TYPE(CompressionFormat, em_Val);
CompressionFormat CompressionFormat_deflate();
CompressionFormat CompressionFormat_deflate_raw();
CompressionFormat CompressionFormat_gzip();
DECLARE_EMLITE_TYPE(PressureSource, em_Val);
PressureSource PressureSource_cpu();
DECLARE_EMLITE_TYPE(PressureState, em_Val);
PressureState PressureState_nominal();
PressureState PressureState_fair();
PressureState PressureState_serious();
PressureState PressureState_critical();
DECLARE_EMLITE_TYPE(ContactProperty, em_Val);
ContactProperty ContactProperty_address();
ContactProperty ContactProperty_email();
ContactProperty ContactProperty_icon();
ContactProperty ContactProperty_name();
ContactProperty ContactProperty_tel();
DECLARE_EMLITE_TYPE(ContentCategory, em_Val);
ContentCategory ContentCategory_none();
ContentCategory ContentCategory_homepage();
ContentCategory ContentCategory_article();
ContentCategory ContentCategory_video();
ContentCategory ContentCategory_audio();
DECLARE_EMLITE_TYPE(CookieSameSite, em_Val);
CookieSameSite CookieSameSite_strict();
CookieSameSite CookieSameSite_lax();
CookieSameSite CookieSameSite_none();
DECLARE_EMLITE_TYPE(CredentialMediationRequirement, em_Val);
CredentialMediationRequirement CredentialMediationRequirement_silent();
CredentialMediationRequirement CredentialMediationRequirement_optional();
CredentialMediationRequirement CredentialMediationRequirement_conditional();
CredentialMediationRequirement CredentialMediationRequirement_required();
DECLARE_EMLITE_TYPE(ScriptingPolicyViolationType, em_Val);
ScriptingPolicyViolationType ScriptingPolicyViolationType_externalScript();
ScriptingPolicyViolationType ScriptingPolicyViolationType_inlineScript();
ScriptingPolicyViolationType ScriptingPolicyViolationType_inlineEventHandler();
ScriptingPolicyViolationType ScriptingPolicyViolationType_eval();
DECLARE_EMLITE_TYPE(FontFaceLoadStatus, em_Val);
FontFaceLoadStatus FontFaceLoadStatus_unloaded();
FontFaceLoadStatus FontFaceLoadStatus_loading();
FontFaceLoadStatus FontFaceLoadStatus_loaded();
FontFaceLoadStatus FontFaceLoadStatus_error();
DECLARE_EMLITE_TYPE(FontFaceSetLoadStatus, em_Val);
FontFaceSetLoadStatus FontFaceSetLoadStatus_loading();
FontFaceSetLoadStatus FontFaceSetLoadStatus_loaded();
DECLARE_EMLITE_TYPE(HighlightType, em_Val);
HighlightType HighlightType_highlight();
HighlightType HighlightType_spelling_error();
HighlightType HighlightType_grammar_error();
DECLARE_EMLITE_TYPE(ChildDisplayType, em_Val);
ChildDisplayType ChildDisplayType_block();
ChildDisplayType ChildDisplayType_normal();
DECLARE_EMLITE_TYPE(LayoutSizingMode, em_Val);
LayoutSizingMode LayoutSizingMode_block_like();
LayoutSizingMode LayoutSizingMode_manual();
DECLARE_EMLITE_TYPE(BlockFragmentationType, em_Val);
BlockFragmentationType BlockFragmentationType_none();
BlockFragmentationType BlockFragmentationType_page();
BlockFragmentationType BlockFragmentationType_column();
BlockFragmentationType BlockFragmentationType_region();
DECLARE_EMLITE_TYPE(BreakType, em_Val);
BreakType BreakType_none();
BreakType BreakType_line();
BreakType BreakType_column();
BreakType BreakType_page();
BreakType BreakType_region();
DECLARE_EMLITE_TYPE(SpatialNavigationDirection, em_Val);
SpatialNavigationDirection SpatialNavigationDirection_up();
SpatialNavigationDirection SpatialNavigationDirection_down();
SpatialNavigationDirection SpatialNavigationDirection_left();
SpatialNavigationDirection SpatialNavigationDirection_right();
DECLARE_EMLITE_TYPE(FocusableAreaSearchMode, em_Val);
FocusableAreaSearchMode FocusableAreaSearchMode_visible();
FocusableAreaSearchMode FocusableAreaSearchMode_all();
DECLARE_EMLITE_TYPE(CSSNumericBaseType, em_Val);
CSSNumericBaseType CSSNumericBaseType_length();
CSSNumericBaseType CSSNumericBaseType_angle();
CSSNumericBaseType CSSNumericBaseType_time();
CSSNumericBaseType CSSNumericBaseType_frequency();
CSSNumericBaseType CSSNumericBaseType_resolution();
CSSNumericBaseType CSSNumericBaseType_flex();
CSSNumericBaseType CSSNumericBaseType_percent();
DECLARE_EMLITE_TYPE(CSSMathOperator, em_Val);
CSSMathOperator CSSMathOperator_sum();
CSSMathOperator CSSMathOperator_product();
CSSMathOperator CSSMathOperator_negate();
CSSMathOperator CSSMathOperator_invert();
CSSMathOperator CSSMathOperator_min();
CSSMathOperator CSSMathOperator_max();
CSSMathOperator CSSMathOperator_clamp();
DECLARE_EMLITE_TYPE(ScrollBehavior, em_Val);
ScrollBehavior ScrollBehavior_auto_();
ScrollBehavior ScrollBehavior_instant();
ScrollBehavior ScrollBehavior_smooth();
DECLARE_EMLITE_TYPE(ScrollLogicalPosition, em_Val);
ScrollLogicalPosition ScrollLogicalPosition_start();
ScrollLogicalPosition ScrollLogicalPosition_center();
ScrollLogicalPosition ScrollLogicalPosition_end();
ScrollLogicalPosition ScrollLogicalPosition_nearest();
DECLARE_EMLITE_TYPE(ScrollIntoViewContainer, em_Val);
ScrollIntoViewContainer ScrollIntoViewContainer_all();
ScrollIntoViewContainer ScrollIntoViewContainer_nearest();
DECLARE_EMLITE_TYPE(CSSBoxType, em_Val);
CSSBoxType CSSBoxType_margin();
CSSBoxType CSSBoxType_border();
CSSBoxType CSSBoxType_padding();
CSSBoxType CSSBoxType_content();
DECLARE_EMLITE_TYPE(DevicePostureType, em_Val);
DevicePostureType DevicePostureType_continuous();
DevicePostureType DevicePostureType_folded();
DECLARE_EMLITE_TYPE(ItemType, em_Val);
ItemType ItemType_product();
ItemType ItemType_subscription();
DECLARE_EMLITE_TYPE(ShadowRootMode, em_Val);
ShadowRootMode ShadowRootMode_open();
ShadowRootMode ShadowRootMode_closed();
DECLARE_EMLITE_TYPE(SlotAssignmentMode, em_Val);
SlotAssignmentMode SlotAssignmentMode_manual();
SlotAssignmentMode SlotAssignmentMode_named();
DECLARE_EMLITE_TYPE(UnderlineStyle, em_Val);
UnderlineStyle UnderlineStyle_none();
UnderlineStyle UnderlineStyle_solid();
UnderlineStyle UnderlineStyle_dotted();
UnderlineStyle UnderlineStyle_dashed();
UnderlineStyle UnderlineStyle_wavy();
DECLARE_EMLITE_TYPE(UnderlineThickness, em_Val);
UnderlineThickness UnderlineThickness_none();
UnderlineThickness UnderlineThickness_thin();
UnderlineThickness UnderlineThickness_thick();
DECLARE_EMLITE_TYPE(MediaKeysRequirement, em_Val);
MediaKeysRequirement MediaKeysRequirement_required();
MediaKeysRequirement MediaKeysRequirement_optional();
MediaKeysRequirement MediaKeysRequirement_not_allowed();
DECLARE_EMLITE_TYPE(MediaKeySessionType, em_Val);
MediaKeySessionType MediaKeySessionType_temporary();
MediaKeySessionType MediaKeySessionType_persistent_license();
DECLARE_EMLITE_TYPE(MediaKeySessionClosedReason, em_Val);
MediaKeySessionClosedReason MediaKeySessionClosedReason_internal_error();
MediaKeySessionClosedReason MediaKeySessionClosedReason_closed_by_application();
MediaKeySessionClosedReason MediaKeySessionClosedReason_release_acknowledged();
MediaKeySessionClosedReason MediaKeySessionClosedReason_hardware_context_reset();
MediaKeySessionClosedReason MediaKeySessionClosedReason_resource_evicted();
DECLARE_EMLITE_TYPE(MediaKeyStatus, em_Val);
MediaKeyStatus MediaKeyStatus_usable();
MediaKeyStatus MediaKeyStatus_expired();
MediaKeyStatus MediaKeyStatus_released();
MediaKeyStatus MediaKeyStatus_output_restricted();
MediaKeyStatus MediaKeyStatus_output_downscaled();
MediaKeyStatus MediaKeyStatus_usable_in_future();
MediaKeyStatus MediaKeyStatus_status_pending();
MediaKeyStatus MediaKeyStatus_internal_error();
DECLARE_EMLITE_TYPE(MediaKeyMessageType, em_Val);
MediaKeyMessageType MediaKeyMessageType_license_request();
MediaKeyMessageType MediaKeyMessageType_license_renewal();
MediaKeyMessageType MediaKeyMessageType_license_release();
MediaKeyMessageType MediaKeyMessageType_individualization_request();
DECLARE_EMLITE_TYPE(IdentityCredentialRequestOptionsContext, em_Val);
IdentityCredentialRequestOptionsContext IdentityCredentialRequestOptionsContext_signin();
IdentityCredentialRequestOptionsContext IdentityCredentialRequestOptionsContext_signup();
IdentityCredentialRequestOptionsContext IdentityCredentialRequestOptionsContext_use();
IdentityCredentialRequestOptionsContext IdentityCredentialRequestOptionsContext_continue_();
DECLARE_EMLITE_TYPE(IdentityCredentialRequestOptionsMode, em_Val);
IdentityCredentialRequestOptionsMode IdentityCredentialRequestOptionsMode_active();
IdentityCredentialRequestOptionsMode IdentityCredentialRequestOptionsMode_passive();
DECLARE_EMLITE_TYPE(OpaqueProperty, em_Val);
OpaqueProperty OpaqueProperty_opaque();
DECLARE_EMLITE_TYPE(FenceReportingDestination, em_Val);
FenceReportingDestination FenceReportingDestination_buyer();
FenceReportingDestination FenceReportingDestination_seller();
FenceReportingDestination FenceReportingDestination_component_seller();
FenceReportingDestination FenceReportingDestination_direct_seller();
FenceReportingDestination FenceReportingDestination_shared_storage_select_url();
DECLARE_EMLITE_TYPE(RequestDestination, em_Val);
RequestDestination RequestDestination_none();
RequestDestination RequestDestination_audio();
RequestDestination RequestDestination_audioworklet();
RequestDestination RequestDestination_document();
RequestDestination RequestDestination_embed();
RequestDestination RequestDestination_font();
RequestDestination RequestDestination_frame();
RequestDestination RequestDestination_iframe();
RequestDestination RequestDestination_image();
RequestDestination RequestDestination_json();
RequestDestination RequestDestination_manifest();
RequestDestination RequestDestination_object();
RequestDestination RequestDestination_paintworklet();
RequestDestination RequestDestination_report();
RequestDestination RequestDestination_script();
RequestDestination RequestDestination_sharedworker();
RequestDestination RequestDestination_style();
RequestDestination RequestDestination_track();
RequestDestination RequestDestination_video();
RequestDestination RequestDestination_worker();
RequestDestination RequestDestination_xslt();
DECLARE_EMLITE_TYPE(RequestMode, em_Val);
RequestMode RequestMode_navigate();
RequestMode RequestMode_same_origin();
RequestMode RequestMode_no_cors();
RequestMode RequestMode_cors();
DECLARE_EMLITE_TYPE(RequestCredentials, em_Val);
RequestCredentials RequestCredentials_omit();
RequestCredentials RequestCredentials_same_origin();
RequestCredentials RequestCredentials_include();
DECLARE_EMLITE_TYPE(RequestCache, em_Val);
RequestCache RequestCache_default_();
RequestCache RequestCache_no_store();
RequestCache RequestCache_reload();
RequestCache RequestCache_no_cache();
RequestCache RequestCache_force_cache();
RequestCache RequestCache_only_if_cached();
DECLARE_EMLITE_TYPE(RequestRedirect, em_Val);
RequestRedirect RequestRedirect_follow();
RequestRedirect RequestRedirect_error();
RequestRedirect RequestRedirect_manual();
DECLARE_EMLITE_TYPE(RequestDuplex, em_Val);
RequestDuplex RequestDuplex_half();
DECLARE_EMLITE_TYPE(RequestPriority, em_Val);
RequestPriority RequestPriority_high();
RequestPriority RequestPriority_low();
RequestPriority RequestPriority_auto_();
DECLARE_EMLITE_TYPE(ResponseType, em_Val);
ResponseType ResponseType_basic();
ResponseType ResponseType_cors();
ResponseType ResponseType_default_();
ResponseType ResponseType_error();
ResponseType ResponseType_opaque();
ResponseType ResponseType_opaqueredirect();
DECLARE_EMLITE_TYPE(FileSystemPermissionMode, em_Val);
FileSystemPermissionMode FileSystemPermissionMode_read();
FileSystemPermissionMode FileSystemPermissionMode_readwrite();
DECLARE_EMLITE_TYPE(WellKnownDirectory, em_Val);
WellKnownDirectory WellKnownDirectory_desktop();
WellKnownDirectory WellKnownDirectory_documents();
WellKnownDirectory WellKnownDirectory_downloads();
WellKnownDirectory WellKnownDirectory_music();
WellKnownDirectory WellKnownDirectory_pictures();
WellKnownDirectory WellKnownDirectory_videos();
DECLARE_EMLITE_TYPE(FileSystemHandleKind, em_Val);
FileSystemHandleKind FileSystemHandleKind_file();
FileSystemHandleKind FileSystemHandleKind_directory();
DECLARE_EMLITE_TYPE(WriteCommandType, em_Val);
WriteCommandType WriteCommandType_write();
WriteCommandType WriteCommandType_seek();
WriteCommandType WriteCommandType_truncate();
DECLARE_EMLITE_TYPE(FullscreenNavigationUI, em_Val);
FullscreenNavigationUI FullscreenNavigationUI_auto_();
FullscreenNavigationUI FullscreenNavigationUI_show();
FullscreenNavigationUI FullscreenNavigationUI_hide();
DECLARE_EMLITE_TYPE(GamepadHand, em_Val);
GamepadHand GamepadHand_none();
GamepadHand GamepadHand_left();
GamepadHand GamepadHand_right();
DECLARE_EMLITE_TYPE(GamepadMappingType, em_Val);
GamepadMappingType GamepadMappingType_none();
GamepadMappingType GamepadMappingType_standard();
GamepadMappingType GamepadMappingType_xr_standard();
DECLARE_EMLITE_TYPE(GamepadHapticsResult, em_Val);
GamepadHapticsResult GamepadHapticsResult_complete();
GamepadHapticsResult GamepadHapticsResult_preempted();
DECLARE_EMLITE_TYPE(GamepadHapticEffectType, em_Val);
GamepadHapticEffectType GamepadHapticEffectType_dual_rumble();
GamepadHapticEffectType GamepadHapticEffectType_trigger_rumble();
DECLARE_EMLITE_TYPE(GyroscopeLocalCoordinateSystem, em_Val);
GyroscopeLocalCoordinateSystem GyroscopeLocalCoordinateSystem_device();
GyroscopeLocalCoordinateSystem GyroscopeLocalCoordinateSystem_screen();
DECLARE_EMLITE_TYPE(HandwritingRecognitionType, em_Val);
HandwritingRecognitionType HandwritingRecognitionType_text();
HandwritingRecognitionType HandwritingRecognitionType_per_character();
DECLARE_EMLITE_TYPE(HandwritingInputType, em_Val);
HandwritingInputType HandwritingInputType_mouse();
HandwritingInputType HandwritingInputType_stylus();
HandwritingInputType HandwritingInputType_touch();
DECLARE_EMLITE_TYPE(DocumentReadyState, em_Val);
DocumentReadyState DocumentReadyState_loading();
DocumentReadyState DocumentReadyState_interactive();
DocumentReadyState DocumentReadyState_complete();
DECLARE_EMLITE_TYPE(DocumentVisibilityState, em_Val);
DocumentVisibilityState DocumentVisibilityState_visible();
DocumentVisibilityState DocumentVisibilityState_hidden();
DECLARE_EMLITE_TYPE(CanPlayTypeResult, em_Val);
CanPlayTypeResult CanPlayTypeResult_none();
CanPlayTypeResult CanPlayTypeResult_maybe();
CanPlayTypeResult CanPlayTypeResult_probably();
DECLARE_EMLITE_TYPE(TextTrackMode, em_Val);
TextTrackMode TextTrackMode_disabled();
TextTrackMode TextTrackMode_hidden();
TextTrackMode TextTrackMode_showing();
DECLARE_EMLITE_TYPE(TextTrackKind, em_Val);
TextTrackKind TextTrackKind_subtitles();
TextTrackKind TextTrackKind_captions();
TextTrackKind TextTrackKind_descriptions();
TextTrackKind TextTrackKind_chapters();
TextTrackKind TextTrackKind_metadata();
DECLARE_EMLITE_TYPE(SelectionMode, em_Val);
SelectionMode SelectionMode_select();
SelectionMode SelectionMode_start();
SelectionMode SelectionMode_end();
SelectionMode SelectionMode_preserve();
DECLARE_EMLITE_TYPE(PredefinedColorSpace, em_Val);
PredefinedColorSpace PredefinedColorSpace_srgb();
PredefinedColorSpace PredefinedColorSpace_display_p3();
DECLARE_EMLITE_TYPE(CanvasColorType, em_Val);
CanvasColorType CanvasColorType_unorm8();
CanvasColorType CanvasColorType_float16();
DECLARE_EMLITE_TYPE(CanvasFillRule, em_Val);
CanvasFillRule CanvasFillRule_nonzero();
CanvasFillRule CanvasFillRule_evenodd();
DECLARE_EMLITE_TYPE(ImageSmoothingQuality, em_Val);
ImageSmoothingQuality ImageSmoothingQuality_low();
ImageSmoothingQuality ImageSmoothingQuality_medium();
ImageSmoothingQuality ImageSmoothingQuality_high();
DECLARE_EMLITE_TYPE(CanvasLineCap, em_Val);
CanvasLineCap CanvasLineCap_butt();
CanvasLineCap CanvasLineCap_round();
CanvasLineCap CanvasLineCap_square();
DECLARE_EMLITE_TYPE(CanvasLineJoin, em_Val);
CanvasLineJoin CanvasLineJoin_round();
CanvasLineJoin CanvasLineJoin_bevel();
CanvasLineJoin CanvasLineJoin_miter();
DECLARE_EMLITE_TYPE(CanvasTextAlign, em_Val);
CanvasTextAlign CanvasTextAlign_start();
CanvasTextAlign CanvasTextAlign_end();
CanvasTextAlign CanvasTextAlign_left();
CanvasTextAlign CanvasTextAlign_right();
CanvasTextAlign CanvasTextAlign_center();
DECLARE_EMLITE_TYPE(CanvasTextBaseline, em_Val);
CanvasTextBaseline CanvasTextBaseline_top();
CanvasTextBaseline CanvasTextBaseline_hanging();
CanvasTextBaseline CanvasTextBaseline_middle();
CanvasTextBaseline CanvasTextBaseline_alphabetic();
CanvasTextBaseline CanvasTextBaseline_ideographic();
CanvasTextBaseline CanvasTextBaseline_bottom();
DECLARE_EMLITE_TYPE(CanvasDirection, em_Val);
CanvasDirection CanvasDirection_ltr();
CanvasDirection CanvasDirection_rtl();
CanvasDirection CanvasDirection_inherit();
DECLARE_EMLITE_TYPE(CanvasFontKerning, em_Val);
CanvasFontKerning CanvasFontKerning_auto_();
CanvasFontKerning CanvasFontKerning_normal();
CanvasFontKerning CanvasFontKerning_none();
DECLARE_EMLITE_TYPE(CanvasFontStretch, em_Val);
CanvasFontStretch CanvasFontStretch_ultra_condensed();
CanvasFontStretch CanvasFontStretch_extra_condensed();
CanvasFontStretch CanvasFontStretch_condensed();
CanvasFontStretch CanvasFontStretch_semi_condensed();
CanvasFontStretch CanvasFontStretch_normal();
CanvasFontStretch CanvasFontStretch_semi_expanded();
CanvasFontStretch CanvasFontStretch_expanded();
CanvasFontStretch CanvasFontStretch_extra_expanded();
CanvasFontStretch CanvasFontStretch_ultra_expanded();
DECLARE_EMLITE_TYPE(CanvasFontVariantCaps, em_Val);
CanvasFontVariantCaps CanvasFontVariantCaps_normal();
CanvasFontVariantCaps CanvasFontVariantCaps_small_caps();
CanvasFontVariantCaps CanvasFontVariantCaps_all_small_caps();
CanvasFontVariantCaps CanvasFontVariantCaps_petite_caps();
CanvasFontVariantCaps CanvasFontVariantCaps_all_petite_caps();
CanvasFontVariantCaps CanvasFontVariantCaps_unicase();
CanvasFontVariantCaps CanvasFontVariantCaps_titling_caps();
DECLARE_EMLITE_TYPE(CanvasTextRendering, em_Val);
CanvasTextRendering CanvasTextRendering_auto_();
CanvasTextRendering CanvasTextRendering_optimizeSpeed();
CanvasTextRendering CanvasTextRendering_optimizeLegibility();
CanvasTextRendering CanvasTextRendering_geometricPrecision();
DECLARE_EMLITE_TYPE(OffscreenRenderingContextId, em_Val);
OffscreenRenderingContextId OffscreenRenderingContextId__2d();
OffscreenRenderingContextId OffscreenRenderingContextId_bitmaprenderer();
OffscreenRenderingContextId OffscreenRenderingContextId_webgl();
OffscreenRenderingContextId OffscreenRenderingContextId_webgl2();
OffscreenRenderingContextId OffscreenRenderingContextId_webgpu();
DECLARE_EMLITE_TYPE(ScrollRestoration, em_Val);
ScrollRestoration ScrollRestoration_auto_();
ScrollRestoration ScrollRestoration_manual();
DECLARE_EMLITE_TYPE(NavigationHistoryBehavior, em_Val);
NavigationHistoryBehavior NavigationHistoryBehavior_auto_();
NavigationHistoryBehavior NavigationHistoryBehavior_push();
NavigationHistoryBehavior NavigationHistoryBehavior_replace();
DECLARE_EMLITE_TYPE(NavigationType, em_Val);
NavigationType NavigationType_push();
NavigationType NavigationType_replace();
NavigationType NavigationType_reload();
NavigationType NavigationType_traverse();
DECLARE_EMLITE_TYPE(NavigationFocusReset, em_Val);
NavigationFocusReset NavigationFocusReset_after_transition();
NavigationFocusReset NavigationFocusReset_manual();
DECLARE_EMLITE_TYPE(NavigationScrollBehavior, em_Val);
NavigationScrollBehavior NavigationScrollBehavior_after_transition();
NavigationScrollBehavior NavigationScrollBehavior_manual();
DECLARE_EMLITE_TYPE(DOMParserSupportedType, em_Val);
DOMParserSupportedType DOMParserSupportedType_text_html();
DOMParserSupportedType DOMParserSupportedType_text_xml();
DOMParserSupportedType DOMParserSupportedType_application_xml();
DOMParserSupportedType DOMParserSupportedType_application_xhtml_xml();
DOMParserSupportedType DOMParserSupportedType_image_svg_xml();
DECLARE_EMLITE_TYPE(ImageDataPixelFormat, em_Val);
ImageDataPixelFormat ImageDataPixelFormat_rgba_unorm8();
ImageDataPixelFormat ImageDataPixelFormat_rgba_float16();
DECLARE_EMLITE_TYPE(ImageOrientation, em_Val);
ImageOrientation ImageOrientation_from_image();
ImageOrientation ImageOrientation_flipY();
DECLARE_EMLITE_TYPE(PremultiplyAlpha, em_Val);
PremultiplyAlpha PremultiplyAlpha_none();
PremultiplyAlpha PremultiplyAlpha_premultiply();
PremultiplyAlpha PremultiplyAlpha_default_();
DECLARE_EMLITE_TYPE(ColorSpaceConversion, em_Val);
ColorSpaceConversion ColorSpaceConversion_none();
ColorSpaceConversion ColorSpaceConversion_default_();
DECLARE_EMLITE_TYPE(ResizeQuality, em_Val);
ResizeQuality ResizeQuality_pixelated();
ResizeQuality ResizeQuality_low();
ResizeQuality ResizeQuality_medium();
ResizeQuality ResizeQuality_high();
DECLARE_EMLITE_TYPE(WorkerType, em_Val);
WorkerType WorkerType_classic();
WorkerType WorkerType_module_();
DECLARE_EMLITE_TYPE(UserIdleState, em_Val);
UserIdleState UserIdleState_active();
UserIdleState UserIdleState_idle();
DECLARE_EMLITE_TYPE(ScreenIdleState, em_Val);
ScreenIdleState ScreenIdleState_locked();
ScreenIdleState ScreenIdleState_unlocked();
DECLARE_EMLITE_TYPE(RedEyeReduction, em_Val);
RedEyeReduction RedEyeReduction_never();
RedEyeReduction RedEyeReduction_always();
RedEyeReduction RedEyeReduction_controllable();
DECLARE_EMLITE_TYPE(FillLightMode, em_Val);
FillLightMode FillLightMode_auto_();
FillLightMode FillLightMode_off();
FillLightMode FillLightMode_flash();
DECLARE_EMLITE_TYPE(MeteringMode, em_Val);
MeteringMode MeteringMode_none();
MeteringMode MeteringMode_manual();
MeteringMode MeteringMode_single_shot();
MeteringMode MeteringMode_continuous();
DECLARE_EMLITE_TYPE(LoginStatus, em_Val);
LoginStatus LoginStatus_logged_in();
LoginStatus LoginStatus_logged_out();
DECLARE_EMLITE_TYPE(ScriptInvokerType, em_Val);
ScriptInvokerType ScriptInvokerType_classic_script();
ScriptInvokerType ScriptInvokerType_module_script();
ScriptInvokerType ScriptInvokerType_event_listener();
ScriptInvokerType ScriptInvokerType_user_callback();
ScriptInvokerType ScriptInvokerType_resolve_promise();
ScriptInvokerType ScriptInvokerType_reject_promise();
DECLARE_EMLITE_TYPE(ScriptWindowAttribution, em_Val);
ScriptWindowAttribution ScriptWindowAttribution_self();
ScriptWindowAttribution ScriptWindowAttribution_descendant();
ScriptWindowAttribution ScriptWindowAttribution_ancestor();
ScriptWindowAttribution ScriptWindowAttribution_same_page();
ScriptWindowAttribution ScriptWindowAttribution_other();
DECLARE_EMLITE_TYPE(MagnetometerLocalCoordinateSystem, em_Val);
MagnetometerLocalCoordinateSystem MagnetometerLocalCoordinateSystem_device();
MagnetometerLocalCoordinateSystem MagnetometerLocalCoordinateSystem_screen();
DECLARE_EMLITE_TYPE(AppBannerPromptOutcome, em_Val);
AppBannerPromptOutcome AppBannerPromptOutcome_accepted();
AppBannerPromptOutcome AppBannerPromptOutcome_dismissed();
DECLARE_EMLITE_TYPE(MediaDecodingType, em_Val);
MediaDecodingType MediaDecodingType_file();
MediaDecodingType MediaDecodingType_media_source();
MediaDecodingType MediaDecodingType_webrtc();
DECLARE_EMLITE_TYPE(MediaEncodingType, em_Val);
MediaEncodingType MediaEncodingType_record();
MediaEncodingType MediaEncodingType_webrtc();
DECLARE_EMLITE_TYPE(HdrMetadataType, em_Val);
HdrMetadataType HdrMetadataType_smpteSt2086();
HdrMetadataType HdrMetadataType_smpteSt2094_10();
HdrMetadataType HdrMetadataType_smpteSt2094_40();
DECLARE_EMLITE_TYPE(ColorGamut, em_Val);
ColorGamut ColorGamut_srgb();
ColorGamut ColorGamut_p3();
ColorGamut ColorGamut_rec2020();
DECLARE_EMLITE_TYPE(TransferFunction, em_Val);
TransferFunction TransferFunction_srgb();
TransferFunction TransferFunction_pq();
TransferFunction TransferFunction_hlg();
DECLARE_EMLITE_TYPE(ReadyState, em_Val);
ReadyState ReadyState_closed();
ReadyState ReadyState_open();
ReadyState ReadyState_ended();
DECLARE_EMLITE_TYPE(EndOfStreamError, em_Val);
EndOfStreamError EndOfStreamError_network();
EndOfStreamError EndOfStreamError_decode();
DECLARE_EMLITE_TYPE(AppendMode, em_Val);
AppendMode AppendMode_segments();
AppendMode AppendMode_sequence();
DECLARE_EMLITE_TYPE(MockCapturePromptResult, em_Val);
MockCapturePromptResult MockCapturePromptResult_granted();
MockCapturePromptResult MockCapturePromptResult_denied();
DECLARE_EMLITE_TYPE(CaptureAction, em_Val);
CaptureAction CaptureAction_next();
CaptureAction CaptureAction_previous();
CaptureAction CaptureAction_first();
CaptureAction CaptureAction_last();
DECLARE_EMLITE_TYPE(MediaStreamTrackState, em_Val);
MediaStreamTrackState MediaStreamTrackState_live();
MediaStreamTrackState MediaStreamTrackState_ended();
DECLARE_EMLITE_TYPE(VideoFacingModeEnum, em_Val);
VideoFacingModeEnum VideoFacingModeEnum_user();
VideoFacingModeEnum VideoFacingModeEnum_environment();
VideoFacingModeEnum VideoFacingModeEnum_left();
VideoFacingModeEnum VideoFacingModeEnum_right();
DECLARE_EMLITE_TYPE(VideoResizeModeEnum, em_Val);
VideoResizeModeEnum VideoResizeModeEnum_none();
VideoResizeModeEnum VideoResizeModeEnum_crop_and_scale();
DECLARE_EMLITE_TYPE(EchoCancellationModeEnum, em_Val);
EchoCancellationModeEnum EchoCancellationModeEnum_all();
EchoCancellationModeEnum EchoCancellationModeEnum_remote_only();
DECLARE_EMLITE_TYPE(MediaDeviceKind, em_Val);
MediaDeviceKind MediaDeviceKind_audioinput();
MediaDeviceKind MediaDeviceKind_audiooutput();
MediaDeviceKind MediaDeviceKind_videoinput();
DECLARE_EMLITE_TYPE(MediaSessionPlaybackState, em_Val);
MediaSessionPlaybackState MediaSessionPlaybackState_none();
MediaSessionPlaybackState MediaSessionPlaybackState_paused();
MediaSessionPlaybackState MediaSessionPlaybackState_playing();
DECLARE_EMLITE_TYPE(MediaSessionAction, em_Val);
MediaSessionAction MediaSessionAction_play();
MediaSessionAction MediaSessionAction_pause();
MediaSessionAction MediaSessionAction_seekbackward();
MediaSessionAction MediaSessionAction_seekforward();
MediaSessionAction MediaSessionAction_previoustrack();
MediaSessionAction MediaSessionAction_nexttrack();
MediaSessionAction MediaSessionAction_skipad();
MediaSessionAction MediaSessionAction_stop();
MediaSessionAction MediaSessionAction_seekto();
MediaSessionAction MediaSessionAction_togglemicrophone();
MediaSessionAction MediaSessionAction_togglecamera();
MediaSessionAction MediaSessionAction_togglescreenshare();
MediaSessionAction MediaSessionAction_hangup();
MediaSessionAction MediaSessionAction_previousslide();
MediaSessionAction MediaSessionAction_nextslide();
MediaSessionAction MediaSessionAction_enterpictureinpicture();
MediaSessionAction MediaSessionAction_voiceactivity();
DECLARE_EMLITE_TYPE(BitrateMode, em_Val);
BitrateMode BitrateMode_constant();
BitrateMode BitrateMode_variable();
DECLARE_EMLITE_TYPE(RecordingState, em_Val);
RecordingState RecordingState_inactive();
RecordingState RecordingState_recording();
RecordingState RecordingState_paused();
DECLARE_EMLITE_TYPE(RTCDegradationPreference, em_Val);
RTCDegradationPreference RTCDegradationPreference_maintain_framerate();
RTCDegradationPreference RTCDegradationPreference_maintain_resolution();
RTCDegradationPreference RTCDegradationPreference_balanced();
DECLARE_EMLITE_TYPE(NavigationTimingType, em_Val);
NavigationTimingType NavigationTimingType_navigate();
NavigationTimingType NavigationTimingType_reload();
NavigationTimingType NavigationTimingType_back_forward();
NavigationTimingType NavigationTimingType_prerender();
DECLARE_EMLITE_TYPE(ConnectionType, em_Val);
ConnectionType ConnectionType_bluetooth();
ConnectionType ConnectionType_cellular();
ConnectionType ConnectionType_ethernet();
ConnectionType ConnectionType_mixed();
ConnectionType ConnectionType_none();
ConnectionType ConnectionType_other();
ConnectionType ConnectionType_unknown();
ConnectionType ConnectionType_wifi();
ConnectionType ConnectionType_wimax();
DECLARE_EMLITE_TYPE(EffectiveConnectionType, em_Val);
EffectiveConnectionType EffectiveConnectionType__2g();
EffectiveConnectionType EffectiveConnectionType__3g();
EffectiveConnectionType EffectiveConnectionType__4g();
EffectiveConnectionType EffectiveConnectionType_slow_2g();
DECLARE_EMLITE_TYPE(NotificationPermission, em_Val);
NotificationPermission NotificationPermission_default_();
NotificationPermission NotificationPermission_denied();
NotificationPermission NotificationPermission_granted();
DECLARE_EMLITE_TYPE(NotificationDirection, em_Val);
NotificationDirection NotificationDirection_auto_();
NotificationDirection NotificationDirection_ltr();
NotificationDirection NotificationDirection_rtl();
DECLARE_EMLITE_TYPE(OrientationSensorLocalCoordinateSystem, em_Val);
OrientationSensorLocalCoordinateSystem OrientationSensorLocalCoordinateSystem_device();
OrientationSensorLocalCoordinateSystem OrientationSensorLocalCoordinateSystem_screen();
DECLARE_EMLITE_TYPE(ClientLifecycleState, em_Val);
ClientLifecycleState ClientLifecycleState_active();
ClientLifecycleState ClientLifecycleState_frozen();
DECLARE_EMLITE_TYPE(PaymentDelegation, em_Val);
PaymentDelegation PaymentDelegation_shippingAddress();
PaymentDelegation PaymentDelegation_payerName();
PaymentDelegation PaymentDelegation_payerPhone();
PaymentDelegation PaymentDelegation_payerEmail();
DECLARE_EMLITE_TYPE(PaymentShippingType, em_Val);
PaymentShippingType PaymentShippingType_shipping();
PaymentShippingType PaymentShippingType_delivery();
PaymentShippingType PaymentShippingType_pickup();
DECLARE_EMLITE_TYPE(PaymentComplete, em_Val);
PaymentComplete PaymentComplete_fail();
PaymentComplete PaymentComplete_success();
PaymentComplete PaymentComplete_unknown();
DECLARE_EMLITE_TYPE(PermissionState, em_Val);
PermissionState PermissionState_granted();
PermissionState PermissionState_denied();
PermissionState PermissionState_prompt();
DECLARE_EMLITE_TYPE(PointerAxis, em_Val);
PointerAxis PointerAxis_block();
PointerAxis PointerAxis_inline_();
PointerAxis PointerAxis_x();
PointerAxis PointerAxis_y();
DECLARE_EMLITE_TYPE(PresentationConnectionState, em_Val);
PresentationConnectionState PresentationConnectionState_connecting();
PresentationConnectionState PresentationConnectionState_connected();
PresentationConnectionState PresentationConnectionState_closed();
PresentationConnectionState PresentationConnectionState_terminated();
DECLARE_EMLITE_TYPE(PresentationConnectionCloseReason, em_Val);
PresentationConnectionCloseReason PresentationConnectionCloseReason_error();
PresentationConnectionCloseReason PresentationConnectionCloseReason_closed();
PresentationConnectionCloseReason PresentationConnectionCloseReason_wentaway();
DECLARE_EMLITE_TYPE(AttributionAggregationProtocol, em_Val);
AttributionAggregationProtocol AttributionAggregationProtocol_dap_15_histogram();
AttributionAggregationProtocol AttributionAggregationProtocol_tee_00();
DECLARE_EMLITE_TYPE(AttributionLogic, em_Val);
AttributionLogic AttributionLogic_last_n_touch();
DECLARE_EMLITE_TYPE(IPAddressSpace, em_Val);
IPAddressSpace IPAddressSpace_public_();
IPAddressSpace IPAddressSpace_private_();
IPAddressSpace IPAddressSpace_local();
DECLARE_EMLITE_TYPE(PushEncryptionKeyName, em_Val);
PushEncryptionKeyName PushEncryptionKeyName_p256dh();
PushEncryptionKeyName PushEncryptionKeyName_auth();
DECLARE_EMLITE_TYPE(ReferrerPolicy, em_Val);
ReferrerPolicy ReferrerPolicy_none();
ReferrerPolicy ReferrerPolicy_no_referrer();
ReferrerPolicy ReferrerPolicy_no_referrer_when_downgrade();
ReferrerPolicy ReferrerPolicy_same_origin();
ReferrerPolicy ReferrerPolicy_origin();
ReferrerPolicy ReferrerPolicy_strict_origin();
ReferrerPolicy ReferrerPolicy_origin_when_cross_origin();
ReferrerPolicy ReferrerPolicy_strict_origin_when_cross_origin();
ReferrerPolicy ReferrerPolicy_unsafe_url();
DECLARE_EMLITE_TYPE(RemotePlaybackState, em_Val);
RemotePlaybackState RemotePlaybackState_connecting();
RemotePlaybackState RemotePlaybackState_connected();
RemotePlaybackState RemotePlaybackState_disconnected();
DECLARE_EMLITE_TYPE(ResizeObserverBoxOptions, em_Val);
ResizeObserverBoxOptions ResizeObserverBoxOptions_border_box();
ResizeObserverBoxOptions ResizeObserverBoxOptions_content_box();
ResizeObserverBoxOptions ResizeObserverBoxOptions_device_pixel_content_box();
DECLARE_EMLITE_TYPE(RenderBlockingStatusType, em_Val);
RenderBlockingStatusType RenderBlockingStatusType_blocking();
RenderBlockingStatusType RenderBlockingStatusType_non_blocking();
DECLARE_EMLITE_TYPE(SameSiteCookiesType, em_Val);
SameSiteCookiesType SameSiteCookiesType_all();
SameSiteCookiesType SameSiteCookiesType_none();
DECLARE_EMLITE_TYPE(SanitizerPresets, em_Val);
SanitizerPresets SanitizerPresets_default_();
DECLARE_EMLITE_TYPE(TaskPriority, em_Val);
TaskPriority TaskPriority_user_blocking();
TaskPriority TaskPriority_user_visible();
TaskPriority TaskPriority_background();
DECLARE_EMLITE_TYPE(CaptureStartFocusBehavior, em_Val);
CaptureStartFocusBehavior CaptureStartFocusBehavior_focus_capturing_application();
CaptureStartFocusBehavior CaptureStartFocusBehavior_focus_captured_surface();
CaptureStartFocusBehavior CaptureStartFocusBehavior_no_focus_change();
DECLARE_EMLITE_TYPE(SelfCapturePreferenceEnum, em_Val);
SelfCapturePreferenceEnum SelfCapturePreferenceEnum_include();
SelfCapturePreferenceEnum SelfCapturePreferenceEnum_exclude();
DECLARE_EMLITE_TYPE(SystemAudioPreferenceEnum, em_Val);
SystemAudioPreferenceEnum SystemAudioPreferenceEnum_include();
SystemAudioPreferenceEnum SystemAudioPreferenceEnum_exclude();
DECLARE_EMLITE_TYPE(WindowAudioPreferenceEnum, em_Val);
WindowAudioPreferenceEnum WindowAudioPreferenceEnum_system();
WindowAudioPreferenceEnum WindowAudioPreferenceEnum_window();
WindowAudioPreferenceEnum WindowAudioPreferenceEnum_exclude();
DECLARE_EMLITE_TYPE(SurfaceSwitchingPreferenceEnum, em_Val);
SurfaceSwitchingPreferenceEnum SurfaceSwitchingPreferenceEnum_include();
SurfaceSwitchingPreferenceEnum SurfaceSwitchingPreferenceEnum_exclude();
DECLARE_EMLITE_TYPE(MonitorTypeSurfacesEnum, em_Val);
MonitorTypeSurfacesEnum MonitorTypeSurfacesEnum_include();
MonitorTypeSurfacesEnum MonitorTypeSurfacesEnum_exclude();
DECLARE_EMLITE_TYPE(DisplayCaptureSurfaceType, em_Val);
DisplayCaptureSurfaceType DisplayCaptureSurfaceType_monitor();
DisplayCaptureSurfaceType DisplayCaptureSurfaceType_window();
DisplayCaptureSurfaceType DisplayCaptureSurfaceType_browser();
DECLARE_EMLITE_TYPE(CursorCaptureConstraint, em_Val);
CursorCaptureConstraint CursorCaptureConstraint_never();
CursorCaptureConstraint CursorCaptureConstraint_always();
CursorCaptureConstraint CursorCaptureConstraint_motion();
DECLARE_EMLITE_TYPE(OrientationLockType, em_Val);
OrientationLockType OrientationLockType_any();
OrientationLockType OrientationLockType_natural();
OrientationLockType OrientationLockType_landscape();
OrientationLockType OrientationLockType_portrait();
OrientationLockType OrientationLockType_portrait_primary();
OrientationLockType OrientationLockType_portrait_secondary();
OrientationLockType OrientationLockType_landscape_primary();
OrientationLockType OrientationLockType_landscape_secondary();
DECLARE_EMLITE_TYPE(OrientationType, em_Val);
OrientationType OrientationType_portrait_primary();
OrientationType OrientationType_portrait_secondary();
OrientationType OrientationType_landscape_primary();
OrientationType OrientationType_landscape_secondary();
DECLARE_EMLITE_TYPE(WakeLockType, em_Val);
WakeLockType WakeLockType_screen();
DECLARE_EMLITE_TYPE(ScrollAxis, em_Val);
ScrollAxis ScrollAxis_block();
ScrollAxis ScrollAxis_inline_();
ScrollAxis ScrollAxis_x();
ScrollAxis ScrollAxis_y();
DECLARE_EMLITE_TYPE(SecurePaymentConfirmationAvailability, em_Val);
SecurePaymentConfirmationAvailability SecurePaymentConfirmationAvailability_available();
SecurePaymentConfirmationAvailability SecurePaymentConfirmationAvailability_unavailable_unknown_reason();
SecurePaymentConfirmationAvailability SecurePaymentConfirmationAvailability_unavailable_feature_not_enabled();
SecurePaymentConfirmationAvailability SecurePaymentConfirmationAvailability_unavailable_no_permission_policy();
SecurePaymentConfirmationAvailability SecurePaymentConfirmationAvailability_unavailable_no_user_verifying_platform_authenticator();
DECLARE_EMLITE_TYPE(ParityType, em_Val);
ParityType ParityType_none();
ParityType ParityType_even();
ParityType ParityType_odd();
DECLARE_EMLITE_TYPE(FlowControlType, em_Val);
FlowControlType FlowControlType_none();
FlowControlType FlowControlType_hardware();
DECLARE_EMLITE_TYPE(ServiceWorkerState, em_Val);
ServiceWorkerState ServiceWorkerState_parsed();
ServiceWorkerState ServiceWorkerState_installing();
ServiceWorkerState ServiceWorkerState_installed();
ServiceWorkerState ServiceWorkerState_activating();
ServiceWorkerState ServiceWorkerState_activated();
ServiceWorkerState ServiceWorkerState_redundant();
DECLARE_EMLITE_TYPE(ServiceWorkerUpdateViaCache, em_Val);
ServiceWorkerUpdateViaCache ServiceWorkerUpdateViaCache_imports();
ServiceWorkerUpdateViaCache ServiceWorkerUpdateViaCache_all();
ServiceWorkerUpdateViaCache ServiceWorkerUpdateViaCache_none();
DECLARE_EMLITE_TYPE(FrameType, em_Val);
FrameType FrameType_auxiliary();
FrameType FrameType_top_level();
FrameType FrameType_nested();
FrameType FrameType_none();
DECLARE_EMLITE_TYPE(ClientType, em_Val);
ClientType ClientType_window();
ClientType ClientType_worker();
ClientType ClientType_sharedworker();
ClientType ClientType_all();
DECLARE_EMLITE_TYPE(RunningStatus, em_Val);
RunningStatus RunningStatus_running();
RunningStatus RunningStatus_not_running();
DECLARE_EMLITE_TYPE(RouterSourceEnum, em_Val);
RouterSourceEnum RouterSourceEnum_cache();
RouterSourceEnum RouterSourceEnum_fetch_event();
RouterSourceEnum RouterSourceEnum_network();
RouterSourceEnum RouterSourceEnum_race_network_and_fetch_handler();
DECLARE_EMLITE_TYPE(LandmarkType, em_Val);
LandmarkType LandmarkType_mouth();
LandmarkType LandmarkType_eye();
LandmarkType LandmarkType_nose();
DECLARE_EMLITE_TYPE(BarcodeFormat, em_Val);
BarcodeFormat BarcodeFormat_aztec();
BarcodeFormat BarcodeFormat_code_128();
BarcodeFormat BarcodeFormat_code_39();
BarcodeFormat BarcodeFormat_code_93();
BarcodeFormat BarcodeFormat_codabar();
BarcodeFormat BarcodeFormat_data_matrix();
BarcodeFormat BarcodeFormat_ean_13();
BarcodeFormat BarcodeFormat_ean_8();
BarcodeFormat BarcodeFormat_itf();
BarcodeFormat BarcodeFormat_pdf417();
BarcodeFormat BarcodeFormat_qr_code();
BarcodeFormat BarcodeFormat_unknown();
BarcodeFormat BarcodeFormat_upc_a();
BarcodeFormat BarcodeFormat_upc_e();
DECLARE_EMLITE_TYPE(SpeechRecognitionErrorCode, em_Val);
SpeechRecognitionErrorCode SpeechRecognitionErrorCode_no_speech();
SpeechRecognitionErrorCode SpeechRecognitionErrorCode_aborted();
SpeechRecognitionErrorCode SpeechRecognitionErrorCode_audio_capture();
SpeechRecognitionErrorCode SpeechRecognitionErrorCode_network();
SpeechRecognitionErrorCode SpeechRecognitionErrorCode_not_allowed();
SpeechRecognitionErrorCode SpeechRecognitionErrorCode_service_not_allowed();
SpeechRecognitionErrorCode SpeechRecognitionErrorCode_language_not_supported();
SpeechRecognitionErrorCode SpeechRecognitionErrorCode_phrases_not_supported();
DECLARE_EMLITE_TYPE(AvailabilityStatus, em_Val);
AvailabilityStatus AvailabilityStatus_unavailable();
AvailabilityStatus AvailabilityStatus_downloadable();
AvailabilityStatus AvailabilityStatus_downloading();
AvailabilityStatus AvailabilityStatus_available();
DECLARE_EMLITE_TYPE(SpeechSynthesisErrorCode, em_Val);
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_canceled();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_interrupted();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_audio_busy();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_audio_hardware();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_network();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_synthesis_unavailable();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_synthesis_failed();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_language_unavailable();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_voice_unavailable();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_text_too_long();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_invalid_argument();
SpeechSynthesisErrorCode SpeechSynthesisErrorCode_not_allowed();
DECLARE_EMLITE_TYPE(ReadableStreamReaderMode, em_Val);
ReadableStreamReaderMode ReadableStreamReaderMode_byob();
DECLARE_EMLITE_TYPE(ReadableStreamType, em_Val);
ReadableStreamType ReadableStreamType_bytes();
DECLARE_EMLITE_TYPE(TouchType, em_Val);
TouchType TouchType_direct();
TouchType TouchType_stylus();
DECLARE_EMLITE_TYPE(RefreshPolicy, em_Val);
RefreshPolicy RefreshPolicy_none();
RefreshPolicy RefreshPolicy_refresh();
DECLARE_EMLITE_TYPE(TokenVersion, em_Val);
TokenVersion TokenVersion__1();
DECLARE_EMLITE_TYPE(OperationType, em_Val);
OperationType OperationType_token_request();
OperationType OperationType_send_redemption_record();
OperationType OperationType_token_redemption();
DECLARE_EMLITE_TYPE(KAnonStatus, em_Val);
KAnonStatus KAnonStatus_passedAndEnforced();
KAnonStatus KAnonStatus_passedNotEnforced();
KAnonStatus KAnonStatus_belowThreshold();
KAnonStatus KAnonStatus_notCalculated();
DECLARE_EMLITE_TYPE(ImportExportKind, em_Val);
ImportExportKind ImportExportKind_function();
ImportExportKind ImportExportKind_table();
ImportExportKind ImportExportKind_memory();
ImportExportKind ImportExportKind_global();
DECLARE_EMLITE_TYPE(TableKind, em_Val);
TableKind TableKind_externref();
TableKind TableKind_anyfunc();
DECLARE_EMLITE_TYPE(ValueType, em_Val);
ValueType ValueType_i32();
ValueType ValueType_i64();
ValueType ValueType_f32();
ValueType ValueType_f64();
ValueType ValueType_v128();
ValueType ValueType_externref();
ValueType ValueType_anyfunc();
DECLARE_EMLITE_TYPE(IterationCompositeOperation, em_Val);
IterationCompositeOperation IterationCompositeOperation_replace();
IterationCompositeOperation IterationCompositeOperation_accumulate();
DECLARE_EMLITE_TYPE(AnimationTriggerBehavior, em_Val);
AnimationTriggerBehavior AnimationTriggerBehavior_once();
AnimationTriggerBehavior AnimationTriggerBehavior_repeat();
AnimationTriggerBehavior AnimationTriggerBehavior_alternate();
AnimationTriggerBehavior AnimationTriggerBehavior_state();
DECLARE_EMLITE_TYPE(AnimationPlayState, em_Val);
AnimationPlayState AnimationPlayState_idle();
AnimationPlayState AnimationPlayState_running();
AnimationPlayState AnimationPlayState_paused();
AnimationPlayState AnimationPlayState_finished();
DECLARE_EMLITE_TYPE(AnimationReplaceState, em_Val);
AnimationReplaceState AnimationReplaceState_active();
AnimationReplaceState AnimationReplaceState_removed();
AnimationReplaceState AnimationReplaceState_persisted();
DECLARE_EMLITE_TYPE(FillMode, em_Val);
FillMode FillMode_none();
FillMode FillMode_forwards();
FillMode FillMode_backwards();
FillMode FillMode_both();
FillMode FillMode_auto_();
DECLARE_EMLITE_TYPE(PlaybackDirection, em_Val);
PlaybackDirection PlaybackDirection_normal();
PlaybackDirection PlaybackDirection_reverse();
PlaybackDirection PlaybackDirection_alternate();
PlaybackDirection PlaybackDirection_alternate_reverse();
DECLARE_EMLITE_TYPE(CompositeOperation, em_Val);
CompositeOperation CompositeOperation_replace();
CompositeOperation CompositeOperation_add();
CompositeOperation CompositeOperation_accumulate();
DECLARE_EMLITE_TYPE(CompositeOperationOrAuto, em_Val);
CompositeOperationOrAuto CompositeOperationOrAuto_replace();
CompositeOperationOrAuto CompositeOperationOrAuto_add();
CompositeOperationOrAuto CompositeOperationOrAuto_accumulate();
CompositeOperationOrAuto CompositeOperationOrAuto_auto_();
DECLARE_EMLITE_TYPE(LockMode, em_Val);
LockMode LockMode_shared();
LockMode LockMode_exclusive();
DECLARE_EMLITE_TYPE(OTPCredentialTransportType, em_Val);
OTPCredentialTransportType OTPCredentialTransportType_sms();
DECLARE_EMLITE_TYPE(AudioContextState, em_Val);
AudioContextState AudioContextState_suspended();
AudioContextState AudioContextState_running();
AudioContextState AudioContextState_closed();
AudioContextState AudioContextState_interrupted();
DECLARE_EMLITE_TYPE(AudioContextRenderSizeCategory, em_Val);
AudioContextRenderSizeCategory AudioContextRenderSizeCategory_default_();
AudioContextRenderSizeCategory AudioContextRenderSizeCategory_hardware();
DECLARE_EMLITE_TYPE(AudioContextLatencyCategory, em_Val);
AudioContextLatencyCategory AudioContextLatencyCategory_balanced();
AudioContextLatencyCategory AudioContextLatencyCategory_interactive();
AudioContextLatencyCategory AudioContextLatencyCategory_playback();
DECLARE_EMLITE_TYPE(AudioSinkType, em_Val);
AudioSinkType AudioSinkType_none();
DECLARE_EMLITE_TYPE(ChannelCountMode, em_Val);
ChannelCountMode ChannelCountMode_max();
ChannelCountMode ChannelCountMode_clamped_max();
ChannelCountMode ChannelCountMode_explicit_();
DECLARE_EMLITE_TYPE(ChannelInterpretation, em_Val);
ChannelInterpretation ChannelInterpretation_speakers();
ChannelInterpretation ChannelInterpretation_discrete();
DECLARE_EMLITE_TYPE(AutomationRate, em_Val);
AutomationRate AutomationRate_a_rate();
AutomationRate AutomationRate_k_rate();
DECLARE_EMLITE_TYPE(BiquadFilterType, em_Val);
BiquadFilterType BiquadFilterType_lowpass();
BiquadFilterType BiquadFilterType_highpass();
BiquadFilterType BiquadFilterType_bandpass();
BiquadFilterType BiquadFilterType_lowshelf();
BiquadFilterType BiquadFilterType_highshelf();
BiquadFilterType BiquadFilterType_peaking();
BiquadFilterType BiquadFilterType_notch();
BiquadFilterType BiquadFilterType_allpass();
DECLARE_EMLITE_TYPE(OscillatorType, em_Val);
OscillatorType OscillatorType_sine();
OscillatorType OscillatorType_square();
OscillatorType OscillatorType_sawtooth();
OscillatorType OscillatorType_triangle();
OscillatorType OscillatorType_custom();
DECLARE_EMLITE_TYPE(PanningModelType, em_Val);
PanningModelType PanningModelType_equalpower();
PanningModelType PanningModelType_HRTF();
DECLARE_EMLITE_TYPE(DistanceModelType, em_Val);
DistanceModelType DistanceModelType_linear();
DistanceModelType DistanceModelType_inverse();
DistanceModelType DistanceModelType_exponential();
DECLARE_EMLITE_TYPE(OverSampleType, em_Val);
OverSampleType OverSampleType_none();
OverSampleType OverSampleType__2x();
OverSampleType OverSampleType__4x();
DECLARE_EMLITE_TYPE(AuthenticatorAttachment, em_Val);
AuthenticatorAttachment AuthenticatorAttachment_platform();
AuthenticatorAttachment AuthenticatorAttachment_cross_platform();
DECLARE_EMLITE_TYPE(ResidentKeyRequirement, em_Val);
ResidentKeyRequirement ResidentKeyRequirement_discouraged();
ResidentKeyRequirement ResidentKeyRequirement_preferred();
ResidentKeyRequirement ResidentKeyRequirement_required();
DECLARE_EMLITE_TYPE(AttestationConveyancePreference, em_Val);
AttestationConveyancePreference AttestationConveyancePreference_none();
AttestationConveyancePreference AttestationConveyancePreference_indirect();
AttestationConveyancePreference AttestationConveyancePreference_direct();
AttestationConveyancePreference AttestationConveyancePreference_enterprise();
DECLARE_EMLITE_TYPE(TokenBindingStatus, em_Val);
TokenBindingStatus TokenBindingStatus_present();
TokenBindingStatus TokenBindingStatus_supported();
DECLARE_EMLITE_TYPE(PublicKeyCredentialType, em_Val);
PublicKeyCredentialType PublicKeyCredentialType_public_key();
DECLARE_EMLITE_TYPE(AuthenticatorTransport, em_Val);
AuthenticatorTransport AuthenticatorTransport_usb();
AuthenticatorTransport AuthenticatorTransport_nfc();
AuthenticatorTransport AuthenticatorTransport_ble();
AuthenticatorTransport AuthenticatorTransport_smart_card();
AuthenticatorTransport AuthenticatorTransport_hybrid();
AuthenticatorTransport AuthenticatorTransport_internal();
DECLARE_EMLITE_TYPE(UserVerificationRequirement, em_Val);
UserVerificationRequirement UserVerificationRequirement_required();
UserVerificationRequirement UserVerificationRequirement_preferred();
UserVerificationRequirement UserVerificationRequirement_discouraged();
DECLARE_EMLITE_TYPE(ClientCapability, em_Val);
ClientCapability ClientCapability_conditionalCreate();
ClientCapability ClientCapability_conditionalGet();
ClientCapability ClientCapability_hybridTransport();
ClientCapability ClientCapability_passkeyPlatformAuthenticator();
ClientCapability ClientCapability_userVerifyingPlatformAuthenticator();
ClientCapability ClientCapability_relatedOrigins();
ClientCapability ClientCapability_signalAllAcceptedCredentials();
ClientCapability ClientCapability_signalCurrentUserDetails();
ClientCapability ClientCapability_signalUnknownCredential();
DECLARE_EMLITE_TYPE(PublicKeyCredentialHint, em_Val);
PublicKeyCredentialHint PublicKeyCredentialHint_security_key();
PublicKeyCredentialHint PublicKeyCredentialHint_client_device();
PublicKeyCredentialHint PublicKeyCredentialHint_hybrid();
DECLARE_EMLITE_TYPE(LargeBlobSupport, em_Val);
LargeBlobSupport LargeBlobSupport_required();
LargeBlobSupport LargeBlobSupport_preferred();
DECLARE_EMLITE_TYPE(AacBitstreamFormat, em_Val);
AacBitstreamFormat AacBitstreamFormat_aac();
AacBitstreamFormat AacBitstreamFormat_adts();
DECLARE_EMLITE_TYPE(AvcBitstreamFormat, em_Val);
AvcBitstreamFormat AvcBitstreamFormat_annexb();
AvcBitstreamFormat AvcBitstreamFormat_avc();
DECLARE_EMLITE_TYPE(HevcBitstreamFormat, em_Val);
HevcBitstreamFormat HevcBitstreamFormat_annexb();
HevcBitstreamFormat HevcBitstreamFormat_hevc();
DECLARE_EMLITE_TYPE(OpusBitstreamFormat, em_Val);
OpusBitstreamFormat OpusBitstreamFormat_opus();
OpusBitstreamFormat OpusBitstreamFormat_ogg();
DECLARE_EMLITE_TYPE(OpusSignal, em_Val);
OpusSignal OpusSignal_auto_();
OpusSignal OpusSignal_music();
OpusSignal OpusSignal_voice();
DECLARE_EMLITE_TYPE(OpusApplication, em_Val);
OpusApplication OpusApplication_voip();
OpusApplication OpusApplication_audio();
OpusApplication OpusApplication_lowdelay();
DECLARE_EMLITE_TYPE(HardwareAcceleration, em_Val);
HardwareAcceleration HardwareAcceleration_no_preference();
HardwareAcceleration HardwareAcceleration_prefer_hardware();
HardwareAcceleration HardwareAcceleration_prefer_software();
DECLARE_EMLITE_TYPE(AlphaOption, em_Val);
AlphaOption AlphaOption_keep();
AlphaOption AlphaOption_discard();
DECLARE_EMLITE_TYPE(LatencyMode, em_Val);
LatencyMode LatencyMode_quality();
LatencyMode LatencyMode_realtime();
DECLARE_EMLITE_TYPE(VideoEncoderBitrateMode, em_Val);
VideoEncoderBitrateMode VideoEncoderBitrateMode_constant();
VideoEncoderBitrateMode VideoEncoderBitrateMode_variable();
VideoEncoderBitrateMode VideoEncoderBitrateMode_quantizer();
DECLARE_EMLITE_TYPE(CodecState, em_Val);
CodecState CodecState_unconfigured();
CodecState CodecState_configured();
CodecState CodecState_closed();
DECLARE_EMLITE_TYPE(EncodedAudioChunkType, em_Val);
EncodedAudioChunkType EncodedAudioChunkType_key();
EncodedAudioChunkType EncodedAudioChunkType_delta();
DECLARE_EMLITE_TYPE(EncodedVideoChunkType, em_Val);
EncodedVideoChunkType EncodedVideoChunkType_key();
EncodedVideoChunkType EncodedVideoChunkType_delta();
DECLARE_EMLITE_TYPE(AudioSampleFormat, em_Val);
AudioSampleFormat AudioSampleFormat_u8();
AudioSampleFormat AudioSampleFormat_s16();
AudioSampleFormat AudioSampleFormat_s32();
AudioSampleFormat AudioSampleFormat_f32();
AudioSampleFormat AudioSampleFormat_u8_planar();
AudioSampleFormat AudioSampleFormat_s16_planar();
AudioSampleFormat AudioSampleFormat_s32_planar();
AudioSampleFormat AudioSampleFormat_f32_planar();
DECLARE_EMLITE_TYPE(VideoPixelFormat, em_Val);
VideoPixelFormat VideoPixelFormat_I420();
VideoPixelFormat VideoPixelFormat_I420P10();
VideoPixelFormat VideoPixelFormat_I420P12();
VideoPixelFormat VideoPixelFormat_I420A();
VideoPixelFormat VideoPixelFormat_I420AP10();
VideoPixelFormat VideoPixelFormat_I420AP12();
VideoPixelFormat VideoPixelFormat_I422();
VideoPixelFormat VideoPixelFormat_I422P10();
VideoPixelFormat VideoPixelFormat_I422P12();
VideoPixelFormat VideoPixelFormat_I422A();
VideoPixelFormat VideoPixelFormat_I422AP10();
VideoPixelFormat VideoPixelFormat_I422AP12();
VideoPixelFormat VideoPixelFormat_I444();
VideoPixelFormat VideoPixelFormat_I444P10();
VideoPixelFormat VideoPixelFormat_I444P12();
VideoPixelFormat VideoPixelFormat_I444A();
VideoPixelFormat VideoPixelFormat_I444AP10();
VideoPixelFormat VideoPixelFormat_I444AP12();
VideoPixelFormat VideoPixelFormat_NV12();
VideoPixelFormat VideoPixelFormat_RGBA();
VideoPixelFormat VideoPixelFormat_RGBX();
VideoPixelFormat VideoPixelFormat_BGRA();
VideoPixelFormat VideoPixelFormat_BGRX();
DECLARE_EMLITE_TYPE(VideoColorPrimaries, em_Val);
VideoColorPrimaries VideoColorPrimaries_bt709();
VideoColorPrimaries VideoColorPrimaries_bt470bg();
VideoColorPrimaries VideoColorPrimaries_smpte170m();
VideoColorPrimaries VideoColorPrimaries_bt2020();
VideoColorPrimaries VideoColorPrimaries_smpte432();
DECLARE_EMLITE_TYPE(VideoTransferCharacteristics, em_Val);
VideoTransferCharacteristics VideoTransferCharacteristics_bt709();
VideoTransferCharacteristics VideoTransferCharacteristics_smpte170m();
VideoTransferCharacteristics VideoTransferCharacteristics_iec61966_2_1();
VideoTransferCharacteristics VideoTransferCharacteristics_linear();
VideoTransferCharacteristics VideoTransferCharacteristics_pq();
VideoTransferCharacteristics VideoTransferCharacteristics_hlg();
DECLARE_EMLITE_TYPE(VideoMatrixCoefficients, em_Val);
VideoMatrixCoefficients VideoMatrixCoefficients_rgb();
VideoMatrixCoefficients VideoMatrixCoefficients_bt709();
VideoMatrixCoefficients VideoMatrixCoefficients_bt470bg();
VideoMatrixCoefficients VideoMatrixCoefficients_smpte170m();
VideoMatrixCoefficients VideoMatrixCoefficients_bt2020_ncl();
DECLARE_EMLITE_TYPE(KeyType, em_Val);
KeyType KeyType_public_();
KeyType KeyType_private_();
KeyType KeyType_secret();
DECLARE_EMLITE_TYPE(KeyUsage, em_Val);
KeyUsage KeyUsage_encrypt();
KeyUsage KeyUsage_decrypt();
KeyUsage KeyUsage_sign();
KeyUsage KeyUsage_verify();
KeyUsage KeyUsage_deriveKey();
KeyUsage KeyUsage_deriveBits();
KeyUsage KeyUsage_wrapKey();
KeyUsage KeyUsage_unwrapKey();
DECLARE_EMLITE_TYPE(KeyFormat, em_Val);
KeyFormat KeyFormat_raw();
KeyFormat KeyFormat_spki();
KeyFormat KeyFormat_pkcs8();
KeyFormat KeyFormat_jwk();
DECLARE_EMLITE_TYPE(WebGLPowerPreference, em_Val);
WebGLPowerPreference WebGLPowerPreference_default_();
WebGLPowerPreference WebGLPowerPreference_low_power();
WebGLPowerPreference WebGLPowerPreference_high_performance();
DECLARE_EMLITE_TYPE(GPUPowerPreference, em_Val);
GPUPowerPreference GPUPowerPreference_low_power();
GPUPowerPreference GPUPowerPreference_high_performance();
DECLARE_EMLITE_TYPE(GPUFeatureName, em_Val);
GPUFeatureName GPUFeatureName_core_features_and_limits();
GPUFeatureName GPUFeatureName_depth_clip_control();
GPUFeatureName GPUFeatureName_depth32float_stencil8();
GPUFeatureName GPUFeatureName_texture_compression_bc();
GPUFeatureName GPUFeatureName_texture_compression_bc_sliced_3d();
GPUFeatureName GPUFeatureName_texture_compression_etc2();
GPUFeatureName GPUFeatureName_texture_compression_astc();
GPUFeatureName GPUFeatureName_texture_compression_astc_sliced_3d();
GPUFeatureName GPUFeatureName_timestamp_query();
GPUFeatureName GPUFeatureName_indirect_first_instance();
GPUFeatureName GPUFeatureName_shader_f16();
GPUFeatureName GPUFeatureName_rg11b10ufloat_renderable();
GPUFeatureName GPUFeatureName_bgra8unorm_storage();
GPUFeatureName GPUFeatureName_float32_filterable();
GPUFeatureName GPUFeatureName_float32_blendable();
GPUFeatureName GPUFeatureName_clip_distances();
GPUFeatureName GPUFeatureName_dual_source_blending();
GPUFeatureName GPUFeatureName_subgroups();
GPUFeatureName GPUFeatureName_texture_formats_tier1();
GPUFeatureName GPUFeatureName_texture_formats_tier2();
DECLARE_EMLITE_TYPE(GPUBufferMapState, em_Val);
GPUBufferMapState GPUBufferMapState_unmapped();
GPUBufferMapState GPUBufferMapState_pending();
GPUBufferMapState GPUBufferMapState_mapped();
DECLARE_EMLITE_TYPE(GPUTextureDimension, em_Val);
GPUTextureDimension GPUTextureDimension__1d();
GPUTextureDimension GPUTextureDimension__2d();
GPUTextureDimension GPUTextureDimension__3d();
DECLARE_EMLITE_TYPE(GPUTextureViewDimension, em_Val);
GPUTextureViewDimension GPUTextureViewDimension__1d();
GPUTextureViewDimension GPUTextureViewDimension__2d();
GPUTextureViewDimension GPUTextureViewDimension__2d_array();
GPUTextureViewDimension GPUTextureViewDimension_cube();
GPUTextureViewDimension GPUTextureViewDimension_cube_array();
GPUTextureViewDimension GPUTextureViewDimension__3d();
DECLARE_EMLITE_TYPE(GPUTextureAspect, em_Val);
GPUTextureAspect GPUTextureAspect_all();
GPUTextureAspect GPUTextureAspect_stencil_only();
GPUTextureAspect GPUTextureAspect_depth_only();
DECLARE_EMLITE_TYPE(GPUTextureFormat, em_Val);
GPUTextureFormat GPUTextureFormat_r8unorm();
GPUTextureFormat GPUTextureFormat_r8snorm();
GPUTextureFormat GPUTextureFormat_r8uint();
GPUTextureFormat GPUTextureFormat_r8sint();
GPUTextureFormat GPUTextureFormat_r16unorm();
GPUTextureFormat GPUTextureFormat_r16snorm();
GPUTextureFormat GPUTextureFormat_r16uint();
GPUTextureFormat GPUTextureFormat_r16sint();
GPUTextureFormat GPUTextureFormat_r16float();
GPUTextureFormat GPUTextureFormat_rg8unorm();
GPUTextureFormat GPUTextureFormat_rg8snorm();
GPUTextureFormat GPUTextureFormat_rg8uint();
GPUTextureFormat GPUTextureFormat_rg8sint();
GPUTextureFormat GPUTextureFormat_r32uint();
GPUTextureFormat GPUTextureFormat_r32sint();
GPUTextureFormat GPUTextureFormat_r32float();
GPUTextureFormat GPUTextureFormat_rg16unorm();
GPUTextureFormat GPUTextureFormat_rg16snorm();
GPUTextureFormat GPUTextureFormat_rg16uint();
GPUTextureFormat GPUTextureFormat_rg16sint();
GPUTextureFormat GPUTextureFormat_rg16float();
GPUTextureFormat GPUTextureFormat_rgba8unorm();
GPUTextureFormat GPUTextureFormat_rgba8unorm_srgb();
GPUTextureFormat GPUTextureFormat_rgba8snorm();
GPUTextureFormat GPUTextureFormat_rgba8uint();
GPUTextureFormat GPUTextureFormat_rgba8sint();
GPUTextureFormat GPUTextureFormat_bgra8unorm();
GPUTextureFormat GPUTextureFormat_bgra8unorm_srgb();
GPUTextureFormat GPUTextureFormat_rgb9e5ufloat();
GPUTextureFormat GPUTextureFormat_rgb10a2uint();
GPUTextureFormat GPUTextureFormat_rgb10a2unorm();
GPUTextureFormat GPUTextureFormat_rg11b10ufloat();
GPUTextureFormat GPUTextureFormat_rg32uint();
GPUTextureFormat GPUTextureFormat_rg32sint();
GPUTextureFormat GPUTextureFormat_rg32float();
GPUTextureFormat GPUTextureFormat_rgba16unorm();
GPUTextureFormat GPUTextureFormat_rgba16snorm();
GPUTextureFormat GPUTextureFormat_rgba16uint();
GPUTextureFormat GPUTextureFormat_rgba16sint();
GPUTextureFormat GPUTextureFormat_rgba16float();
GPUTextureFormat GPUTextureFormat_rgba32uint();
GPUTextureFormat GPUTextureFormat_rgba32sint();
GPUTextureFormat GPUTextureFormat_rgba32float();
GPUTextureFormat GPUTextureFormat_stencil8();
GPUTextureFormat GPUTextureFormat_depth16unorm();
GPUTextureFormat GPUTextureFormat_depth24plus();
GPUTextureFormat GPUTextureFormat_depth24plus_stencil8();
GPUTextureFormat GPUTextureFormat_depth32float();
GPUTextureFormat GPUTextureFormat_depth32float_stencil8();
GPUTextureFormat GPUTextureFormat_bc1_rgba_unorm();
GPUTextureFormat GPUTextureFormat_bc1_rgba_unorm_srgb();
GPUTextureFormat GPUTextureFormat_bc2_rgba_unorm();
GPUTextureFormat GPUTextureFormat_bc2_rgba_unorm_srgb();
GPUTextureFormat GPUTextureFormat_bc3_rgba_unorm();
GPUTextureFormat GPUTextureFormat_bc3_rgba_unorm_srgb();
GPUTextureFormat GPUTextureFormat_bc4_r_unorm();
GPUTextureFormat GPUTextureFormat_bc4_r_snorm();
GPUTextureFormat GPUTextureFormat_bc5_rg_unorm();
GPUTextureFormat GPUTextureFormat_bc5_rg_snorm();
GPUTextureFormat GPUTextureFormat_bc6h_rgb_ufloat();
GPUTextureFormat GPUTextureFormat_bc6h_rgb_float();
GPUTextureFormat GPUTextureFormat_bc7_rgba_unorm();
GPUTextureFormat GPUTextureFormat_bc7_rgba_unorm_srgb();
GPUTextureFormat GPUTextureFormat_etc2_rgb8unorm();
GPUTextureFormat GPUTextureFormat_etc2_rgb8unorm_srgb();
GPUTextureFormat GPUTextureFormat_etc2_rgb8a1unorm();
GPUTextureFormat GPUTextureFormat_etc2_rgb8a1unorm_srgb();
GPUTextureFormat GPUTextureFormat_etc2_rgba8unorm();
GPUTextureFormat GPUTextureFormat_etc2_rgba8unorm_srgb();
GPUTextureFormat GPUTextureFormat_eac_r11unorm();
GPUTextureFormat GPUTextureFormat_eac_r11snorm();
GPUTextureFormat GPUTextureFormat_eac_rg11unorm();
GPUTextureFormat GPUTextureFormat_eac_rg11snorm();
GPUTextureFormat GPUTextureFormat_astc_4x4_unorm();
GPUTextureFormat GPUTextureFormat_astc_4x4_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_5x4_unorm();
GPUTextureFormat GPUTextureFormat_astc_5x4_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_5x5_unorm();
GPUTextureFormat GPUTextureFormat_astc_5x5_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_6x5_unorm();
GPUTextureFormat GPUTextureFormat_astc_6x5_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_6x6_unorm();
GPUTextureFormat GPUTextureFormat_astc_6x6_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_8x5_unorm();
GPUTextureFormat GPUTextureFormat_astc_8x5_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_8x6_unorm();
GPUTextureFormat GPUTextureFormat_astc_8x6_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_8x8_unorm();
GPUTextureFormat GPUTextureFormat_astc_8x8_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_10x5_unorm();
GPUTextureFormat GPUTextureFormat_astc_10x5_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_10x6_unorm();
GPUTextureFormat GPUTextureFormat_astc_10x6_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_10x8_unorm();
GPUTextureFormat GPUTextureFormat_astc_10x8_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_10x10_unorm();
GPUTextureFormat GPUTextureFormat_astc_10x10_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_12x10_unorm();
GPUTextureFormat GPUTextureFormat_astc_12x10_unorm_srgb();
GPUTextureFormat GPUTextureFormat_astc_12x12_unorm();
GPUTextureFormat GPUTextureFormat_astc_12x12_unorm_srgb();
DECLARE_EMLITE_TYPE(GPUAddressMode, em_Val);
GPUAddressMode GPUAddressMode_clamp_to_edge();
GPUAddressMode GPUAddressMode_repeat();
GPUAddressMode GPUAddressMode_mirror_repeat();
DECLARE_EMLITE_TYPE(GPUFilterMode, em_Val);
GPUFilterMode GPUFilterMode_nearest();
GPUFilterMode GPUFilterMode_linear();
DECLARE_EMLITE_TYPE(GPUMipmapFilterMode, em_Val);
GPUMipmapFilterMode GPUMipmapFilterMode_nearest();
GPUMipmapFilterMode GPUMipmapFilterMode_linear();
DECLARE_EMLITE_TYPE(GPUCompareFunction, em_Val);
GPUCompareFunction GPUCompareFunction_never();
GPUCompareFunction GPUCompareFunction_less();
GPUCompareFunction GPUCompareFunction_equal();
GPUCompareFunction GPUCompareFunction_less_equal();
GPUCompareFunction GPUCompareFunction_greater();
GPUCompareFunction GPUCompareFunction_not_equal();
GPUCompareFunction GPUCompareFunction_greater_equal();
GPUCompareFunction GPUCompareFunction_always();
DECLARE_EMLITE_TYPE(GPUBufferBindingType, em_Val);
GPUBufferBindingType GPUBufferBindingType_uniform();
GPUBufferBindingType GPUBufferBindingType_storage();
GPUBufferBindingType GPUBufferBindingType_read_only_storage();
DECLARE_EMLITE_TYPE(GPUSamplerBindingType, em_Val);
GPUSamplerBindingType GPUSamplerBindingType_filtering();
GPUSamplerBindingType GPUSamplerBindingType_non_filtering();
GPUSamplerBindingType GPUSamplerBindingType_comparison();
DECLARE_EMLITE_TYPE(GPUTextureSampleType, em_Val);
GPUTextureSampleType GPUTextureSampleType_float_();
GPUTextureSampleType GPUTextureSampleType_unfilterable_float();
GPUTextureSampleType GPUTextureSampleType_depth();
GPUTextureSampleType GPUTextureSampleType_sint();
GPUTextureSampleType GPUTextureSampleType_uint();
DECLARE_EMLITE_TYPE(GPUStorageTextureAccess, em_Val);
GPUStorageTextureAccess GPUStorageTextureAccess_write_only();
GPUStorageTextureAccess GPUStorageTextureAccess_read_only();
GPUStorageTextureAccess GPUStorageTextureAccess_read_write();
DECLARE_EMLITE_TYPE(GPUCompilationMessageType, em_Val);
GPUCompilationMessageType GPUCompilationMessageType_error();
GPUCompilationMessageType GPUCompilationMessageType_warning();
GPUCompilationMessageType GPUCompilationMessageType_info();
DECLARE_EMLITE_TYPE(GPUPipelineErrorReason, em_Val);
GPUPipelineErrorReason GPUPipelineErrorReason_validation();
GPUPipelineErrorReason GPUPipelineErrorReason_internal();
DECLARE_EMLITE_TYPE(GPUAutoLayoutMode, em_Val);
GPUAutoLayoutMode GPUAutoLayoutMode_auto_();
DECLARE_EMLITE_TYPE(GPUPrimitiveTopology, em_Val);
GPUPrimitiveTopology GPUPrimitiveTopology_point_list();
GPUPrimitiveTopology GPUPrimitiveTopology_line_list();
GPUPrimitiveTopology GPUPrimitiveTopology_line_strip();
GPUPrimitiveTopology GPUPrimitiveTopology_triangle_list();
GPUPrimitiveTopology GPUPrimitiveTopology_triangle_strip();
DECLARE_EMLITE_TYPE(GPUFrontFace, em_Val);
GPUFrontFace GPUFrontFace_ccw();
GPUFrontFace GPUFrontFace_cw();
DECLARE_EMLITE_TYPE(GPUCullMode, em_Val);
GPUCullMode GPUCullMode_none();
GPUCullMode GPUCullMode_front();
GPUCullMode GPUCullMode_back();
DECLARE_EMLITE_TYPE(GPUBlendFactor, em_Val);
GPUBlendFactor GPUBlendFactor_zero();
GPUBlendFactor GPUBlendFactor_one();
GPUBlendFactor GPUBlendFactor_src();
GPUBlendFactor GPUBlendFactor_one_minus_src();
GPUBlendFactor GPUBlendFactor_src_alpha();
GPUBlendFactor GPUBlendFactor_one_minus_src_alpha();
GPUBlendFactor GPUBlendFactor_dst();
GPUBlendFactor GPUBlendFactor_one_minus_dst();
GPUBlendFactor GPUBlendFactor_dst_alpha();
GPUBlendFactor GPUBlendFactor_one_minus_dst_alpha();
GPUBlendFactor GPUBlendFactor_src_alpha_saturated();
GPUBlendFactor GPUBlendFactor_constant();
GPUBlendFactor GPUBlendFactor_one_minus_constant();
GPUBlendFactor GPUBlendFactor_src1();
GPUBlendFactor GPUBlendFactor_one_minus_src1();
GPUBlendFactor GPUBlendFactor_src1_alpha();
GPUBlendFactor GPUBlendFactor_one_minus_src1_alpha();
DECLARE_EMLITE_TYPE(GPUBlendOperation, em_Val);
GPUBlendOperation GPUBlendOperation_add();
GPUBlendOperation GPUBlendOperation_subtract();
GPUBlendOperation GPUBlendOperation_reverse_subtract();
GPUBlendOperation GPUBlendOperation_min();
GPUBlendOperation GPUBlendOperation_max();
DECLARE_EMLITE_TYPE(GPUStencilOperation, em_Val);
GPUStencilOperation GPUStencilOperation_keep();
GPUStencilOperation GPUStencilOperation_zero();
GPUStencilOperation GPUStencilOperation_replace();
GPUStencilOperation GPUStencilOperation_invert();
GPUStencilOperation GPUStencilOperation_increment_clamp();
GPUStencilOperation GPUStencilOperation_decrement_clamp();
GPUStencilOperation GPUStencilOperation_increment_wrap();
GPUStencilOperation GPUStencilOperation_decrement_wrap();
DECLARE_EMLITE_TYPE(GPUIndexFormat, em_Val);
GPUIndexFormat GPUIndexFormat_uint16();
GPUIndexFormat GPUIndexFormat_uint32();
DECLARE_EMLITE_TYPE(GPUVertexFormat, em_Val);
GPUVertexFormat GPUVertexFormat_uint8();
GPUVertexFormat GPUVertexFormat_uint8x2();
GPUVertexFormat GPUVertexFormat_uint8x4();
GPUVertexFormat GPUVertexFormat_sint8();
GPUVertexFormat GPUVertexFormat_sint8x2();
GPUVertexFormat GPUVertexFormat_sint8x4();
GPUVertexFormat GPUVertexFormat_unorm8();
GPUVertexFormat GPUVertexFormat_unorm8x2();
GPUVertexFormat GPUVertexFormat_unorm8x4();
GPUVertexFormat GPUVertexFormat_snorm8();
GPUVertexFormat GPUVertexFormat_snorm8x2();
GPUVertexFormat GPUVertexFormat_snorm8x4();
GPUVertexFormat GPUVertexFormat_uint16();
GPUVertexFormat GPUVertexFormat_uint16x2();
GPUVertexFormat GPUVertexFormat_uint16x4();
GPUVertexFormat GPUVertexFormat_sint16();
GPUVertexFormat GPUVertexFormat_sint16x2();
GPUVertexFormat GPUVertexFormat_sint16x4();
GPUVertexFormat GPUVertexFormat_unorm16();
GPUVertexFormat GPUVertexFormat_unorm16x2();
GPUVertexFormat GPUVertexFormat_unorm16x4();
GPUVertexFormat GPUVertexFormat_snorm16();
GPUVertexFormat GPUVertexFormat_snorm16x2();
GPUVertexFormat GPUVertexFormat_snorm16x4();
GPUVertexFormat GPUVertexFormat_float16();
GPUVertexFormat GPUVertexFormat_float16x2();
GPUVertexFormat GPUVertexFormat_float16x4();
GPUVertexFormat GPUVertexFormat_float32();
GPUVertexFormat GPUVertexFormat_float32x2();
GPUVertexFormat GPUVertexFormat_float32x3();
GPUVertexFormat GPUVertexFormat_float32x4();
GPUVertexFormat GPUVertexFormat_uint32();
GPUVertexFormat GPUVertexFormat_uint32x2();
GPUVertexFormat GPUVertexFormat_uint32x3();
GPUVertexFormat GPUVertexFormat_uint32x4();
GPUVertexFormat GPUVertexFormat_sint32();
GPUVertexFormat GPUVertexFormat_sint32x2();
GPUVertexFormat GPUVertexFormat_sint32x3();
GPUVertexFormat GPUVertexFormat_sint32x4();
GPUVertexFormat GPUVertexFormat_unorm10_10_10_2();
GPUVertexFormat GPUVertexFormat_unorm8x4_bgra();
DECLARE_EMLITE_TYPE(GPUVertexStepMode, em_Val);
GPUVertexStepMode GPUVertexStepMode_vertex();
GPUVertexStepMode GPUVertexStepMode_instance();
DECLARE_EMLITE_TYPE(GPULoadOp, em_Val);
GPULoadOp GPULoadOp_load();
GPULoadOp GPULoadOp_clear();
DECLARE_EMLITE_TYPE(GPUStoreOp, em_Val);
GPUStoreOp GPUStoreOp_store();
GPUStoreOp GPUStoreOp_discard();
DECLARE_EMLITE_TYPE(GPUQueryType, em_Val);
GPUQueryType GPUQueryType_occlusion();
GPUQueryType GPUQueryType_timestamp();
DECLARE_EMLITE_TYPE(GPUCanvasAlphaMode, em_Val);
GPUCanvasAlphaMode GPUCanvasAlphaMode_opaque();
GPUCanvasAlphaMode GPUCanvasAlphaMode_premultiplied();
DECLARE_EMLITE_TYPE(GPUCanvasToneMappingMode, em_Val);
GPUCanvasToneMappingMode GPUCanvasToneMappingMode_standard();
GPUCanvasToneMappingMode GPUCanvasToneMappingMode_extended();
DECLARE_EMLITE_TYPE(GPUDeviceLostReason, em_Val);
GPUDeviceLostReason GPUDeviceLostReason_unknown();
GPUDeviceLostReason GPUDeviceLostReason_destroyed();
DECLARE_EMLITE_TYPE(GPUErrorFilter, em_Val);
GPUErrorFilter GPUErrorFilter_validation();
GPUErrorFilter GPUErrorFilter_out_of_memory();
GPUErrorFilter GPUErrorFilter_internal();
DECLARE_EMLITE_TYPE(HIDUnitSystem, em_Val);
HIDUnitSystem HIDUnitSystem_none();
HIDUnitSystem HIDUnitSystem_si_linear();
HIDUnitSystem HIDUnitSystem_si_rotation();
HIDUnitSystem HIDUnitSystem_english_linear();
HIDUnitSystem HIDUnitSystem_english_rotation();
HIDUnitSystem HIDUnitSystem_vendor_defined();
HIDUnitSystem HIDUnitSystem_reserved();
DECLARE_EMLITE_TYPE(MIDIPortType, em_Val);
MIDIPortType MIDIPortType_input();
MIDIPortType MIDIPortType_output();
DECLARE_EMLITE_TYPE(MIDIPortDeviceState, em_Val);
MIDIPortDeviceState MIDIPortDeviceState_disconnected();
MIDIPortDeviceState MIDIPortDeviceState_connected();
DECLARE_EMLITE_TYPE(MIDIPortConnectionState, em_Val);
MIDIPortConnectionState MIDIPortConnectionState_open();
MIDIPortConnectionState MIDIPortConnectionState_closed();
MIDIPortConnectionState MIDIPortConnectionState_pending();
DECLARE_EMLITE_TYPE(MLPowerPreference, em_Val);
MLPowerPreference MLPowerPreference_default_();
MLPowerPreference MLPowerPreference_high_performance();
MLPowerPreference MLPowerPreference_low_power();
DECLARE_EMLITE_TYPE(MLInputOperandLayout, em_Val);
MLInputOperandLayout MLInputOperandLayout_nchw();
MLInputOperandLayout MLInputOperandLayout_nhwc();
DECLARE_EMLITE_TYPE(MLOperandDataType, em_Val);
MLOperandDataType MLOperandDataType_float32();
MLOperandDataType MLOperandDataType_float16();
MLOperandDataType MLOperandDataType_int32();
MLOperandDataType MLOperandDataType_uint32();
MLOperandDataType MLOperandDataType_int64();
MLOperandDataType MLOperandDataType_uint64();
MLOperandDataType MLOperandDataType_int8();
MLOperandDataType MLOperandDataType_uint8();
DECLARE_EMLITE_TYPE(MLConv2dFilterOperandLayout, em_Val);
MLConv2dFilterOperandLayout MLConv2dFilterOperandLayout_oihw();
MLConv2dFilterOperandLayout MLConv2dFilterOperandLayout_hwio();
MLConv2dFilterOperandLayout MLConv2dFilterOperandLayout_ohwi();
MLConv2dFilterOperandLayout MLConv2dFilterOperandLayout_ihwo();
DECLARE_EMLITE_TYPE(MLConvTranspose2dFilterOperandLayout, em_Val);
MLConvTranspose2dFilterOperandLayout MLConvTranspose2dFilterOperandLayout_iohw();
MLConvTranspose2dFilterOperandLayout MLConvTranspose2dFilterOperandLayout_hwoi();
MLConvTranspose2dFilterOperandLayout MLConvTranspose2dFilterOperandLayout_ohwi();
DECLARE_EMLITE_TYPE(MLGruWeightLayout, em_Val);
MLGruWeightLayout MLGruWeightLayout_zrn();
MLGruWeightLayout MLGruWeightLayout_rzn();
DECLARE_EMLITE_TYPE(MLRecurrentNetworkActivation, em_Val);
MLRecurrentNetworkActivation MLRecurrentNetworkActivation_relu();
MLRecurrentNetworkActivation MLRecurrentNetworkActivation_sigmoid();
MLRecurrentNetworkActivation MLRecurrentNetworkActivation_tanh();
DECLARE_EMLITE_TYPE(MLRecurrentNetworkDirection, em_Val);
MLRecurrentNetworkDirection MLRecurrentNetworkDirection_forward();
MLRecurrentNetworkDirection MLRecurrentNetworkDirection_backward();
MLRecurrentNetworkDirection MLRecurrentNetworkDirection_both();
DECLARE_EMLITE_TYPE(MLLstmWeightLayout, em_Val);
MLLstmWeightLayout MLLstmWeightLayout_iofg();
MLLstmWeightLayout MLLstmWeightLayout_ifgo();
DECLARE_EMLITE_TYPE(MLPaddingMode, em_Val);
MLPaddingMode MLPaddingMode_constant();
MLPaddingMode MLPaddingMode_edge();
MLPaddingMode MLPaddingMode_reflection();
DECLARE_EMLITE_TYPE(MLRoundingType, em_Val);
MLRoundingType MLRoundingType_floor();
MLRoundingType MLRoundingType_ceil();
DECLARE_EMLITE_TYPE(MLInterpolationMode, em_Val);
MLInterpolationMode MLInterpolationMode_nearest_neighbor();
MLInterpolationMode MLInterpolationMode_linear();
DECLARE_EMLITE_TYPE(SFrameTransformRole, em_Val);
SFrameTransformRole SFrameTransformRole_encrypt();
SFrameTransformRole SFrameTransformRole_decrypt();
DECLARE_EMLITE_TYPE(SFrameCipherSuite, em_Val);
SFrameCipherSuite SFrameCipherSuite_AES_128_CTR_HMAC_SHA256_80();
SFrameCipherSuite SFrameCipherSuite_AES_128_CTR_HMAC_SHA256_64();
SFrameCipherSuite SFrameCipherSuite_AES_128_CTR_HMAC_SHA256_32();
SFrameCipherSuite SFrameCipherSuite_AES_128_GCM_SHA256_128();
SFrameCipherSuite SFrameCipherSuite_AES_256_GCM_SHA512_128();
DECLARE_EMLITE_TYPE(SFrameTransformErrorEventType, em_Val);
SFrameTransformErrorEventType SFrameTransformErrorEventType_authentication();
SFrameTransformErrorEventType SFrameTransformErrorEventType_keyID();
SFrameTransformErrorEventType SFrameTransformErrorEventType_syntax();
DECLARE_EMLITE_TYPE(RTCEncodedVideoFrameType, em_Val);
RTCEncodedVideoFrameType RTCEncodedVideoFrameType_empty();
RTCEncodedVideoFrameType RTCEncodedVideoFrameType_key();
RTCEncodedVideoFrameType RTCEncodedVideoFrameType_delta();
DECLARE_EMLITE_TYPE(RTCErrorDetailTypeIdp, em_Val);
RTCErrorDetailTypeIdp RTCErrorDetailTypeIdp_idp_bad_script_failure();
RTCErrorDetailTypeIdp RTCErrorDetailTypeIdp_idp_execution_failure();
RTCErrorDetailTypeIdp RTCErrorDetailTypeIdp_idp_load_failure();
RTCErrorDetailTypeIdp RTCErrorDetailTypeIdp_idp_need_login();
RTCErrorDetailTypeIdp RTCErrorDetailTypeIdp_idp_timeout();
RTCErrorDetailTypeIdp RTCErrorDetailTypeIdp_idp_tls_failure();
RTCErrorDetailTypeIdp RTCErrorDetailTypeIdp_idp_token_expired();
RTCErrorDetailTypeIdp RTCErrorDetailTypeIdp_idp_token_invalid();
DECLARE_EMLITE_TYPE(RTCPriorityType, em_Val);
RTCPriorityType RTCPriorityType_very_low();
RTCPriorityType RTCPriorityType_low();
RTCPriorityType RTCPriorityType_medium();
RTCPriorityType RTCPriorityType_high();
DECLARE_EMLITE_TYPE(RTCStatsType, em_Val);
RTCStatsType RTCStatsType_codec();
RTCStatsType RTCStatsType_inbound_rtp();
RTCStatsType RTCStatsType_outbound_rtp();
RTCStatsType RTCStatsType_remote_inbound_rtp();
RTCStatsType RTCStatsType_remote_outbound_rtp();
RTCStatsType RTCStatsType_media_source();
RTCStatsType RTCStatsType_media_playout();
RTCStatsType RTCStatsType_peer_connection();
RTCStatsType RTCStatsType_data_channel();
RTCStatsType RTCStatsType_transport();
RTCStatsType RTCStatsType_candidate_pair();
RTCStatsType RTCStatsType_local_candidate();
RTCStatsType RTCStatsType_remote_candidate();
RTCStatsType RTCStatsType_certificate();
DECLARE_EMLITE_TYPE(RTCQualityLimitationReason, em_Val);
RTCQualityLimitationReason RTCQualityLimitationReason_none();
RTCQualityLimitationReason RTCQualityLimitationReason_cpu();
RTCQualityLimitationReason RTCQualityLimitationReason_bandwidth();
RTCQualityLimitationReason RTCQualityLimitationReason_other();
DECLARE_EMLITE_TYPE(RTCDtlsRole, em_Val);
RTCDtlsRole RTCDtlsRole_client();
RTCDtlsRole RTCDtlsRole_server();
RTCDtlsRole RTCDtlsRole_unknown();
DECLARE_EMLITE_TYPE(RTCStatsIceCandidatePairState, em_Val);
RTCStatsIceCandidatePairState RTCStatsIceCandidatePairState_frozen();
RTCStatsIceCandidatePairState RTCStatsIceCandidatePairState_waiting();
RTCStatsIceCandidatePairState RTCStatsIceCandidatePairState_in_progress();
RTCStatsIceCandidatePairState RTCStatsIceCandidatePairState_failed();
RTCStatsIceCandidatePairState RTCStatsIceCandidatePairState_succeeded();
DECLARE_EMLITE_TYPE(RTCIceTransportPolicy, em_Val);
RTCIceTransportPolicy RTCIceTransportPolicy_relay();
RTCIceTransportPolicy RTCIceTransportPolicy_all();
DECLARE_EMLITE_TYPE(RTCBundlePolicy, em_Val);
RTCBundlePolicy RTCBundlePolicy_balanced();
RTCBundlePolicy RTCBundlePolicy_max_compat();
RTCBundlePolicy RTCBundlePolicy_max_bundle();
DECLARE_EMLITE_TYPE(RTCRtcpMuxPolicy, em_Val);
RTCRtcpMuxPolicy RTCRtcpMuxPolicy_require();
DECLARE_EMLITE_TYPE(RTCSignalingState, em_Val);
RTCSignalingState RTCSignalingState_stable();
RTCSignalingState RTCSignalingState_have_local_offer();
RTCSignalingState RTCSignalingState_have_remote_offer();
RTCSignalingState RTCSignalingState_have_local_pranswer();
RTCSignalingState RTCSignalingState_have_remote_pranswer();
RTCSignalingState RTCSignalingState_closed();
DECLARE_EMLITE_TYPE(RTCIceGatheringState, em_Val);
RTCIceGatheringState RTCIceGatheringState_new_();
RTCIceGatheringState RTCIceGatheringState_gathering();
RTCIceGatheringState RTCIceGatheringState_complete();
DECLARE_EMLITE_TYPE(RTCPeerConnectionState, em_Val);
RTCPeerConnectionState RTCPeerConnectionState_closed();
RTCPeerConnectionState RTCPeerConnectionState_failed();
RTCPeerConnectionState RTCPeerConnectionState_disconnected();
RTCPeerConnectionState RTCPeerConnectionState_new_();
RTCPeerConnectionState RTCPeerConnectionState_connecting();
RTCPeerConnectionState RTCPeerConnectionState_connected();
DECLARE_EMLITE_TYPE(RTCIceConnectionState, em_Val);
RTCIceConnectionState RTCIceConnectionState_closed();
RTCIceConnectionState RTCIceConnectionState_failed();
RTCIceConnectionState RTCIceConnectionState_disconnected();
RTCIceConnectionState RTCIceConnectionState_new_();
RTCIceConnectionState RTCIceConnectionState_checking();
RTCIceConnectionState RTCIceConnectionState_completed();
RTCIceConnectionState RTCIceConnectionState_connected();
DECLARE_EMLITE_TYPE(RTCSdpType, em_Val);
RTCSdpType RTCSdpType_offer();
RTCSdpType RTCSdpType_pranswer();
RTCSdpType RTCSdpType_answer();
RTCSdpType RTCSdpType_rollback();
DECLARE_EMLITE_TYPE(RTCIceProtocol, em_Val);
RTCIceProtocol RTCIceProtocol_udp();
RTCIceProtocol RTCIceProtocol_tcp();
DECLARE_EMLITE_TYPE(RTCIceTcpCandidateType, em_Val);
RTCIceTcpCandidateType RTCIceTcpCandidateType_active();
RTCIceTcpCandidateType RTCIceTcpCandidateType_passive();
RTCIceTcpCandidateType RTCIceTcpCandidateType_so();
DECLARE_EMLITE_TYPE(RTCIceCandidateType, em_Val);
RTCIceCandidateType RTCIceCandidateType_host();
RTCIceCandidateType RTCIceCandidateType_srflx();
RTCIceCandidateType RTCIceCandidateType_prflx();
RTCIceCandidateType RTCIceCandidateType_relay();
DECLARE_EMLITE_TYPE(RTCIceServerTransportProtocol, em_Val);
RTCIceServerTransportProtocol RTCIceServerTransportProtocol_udp();
RTCIceServerTransportProtocol RTCIceServerTransportProtocol_tcp();
RTCIceServerTransportProtocol RTCIceServerTransportProtocol_tls();
DECLARE_EMLITE_TYPE(RTCRtpTransceiverDirection, em_Val);
RTCRtpTransceiverDirection RTCRtpTransceiverDirection_sendrecv();
RTCRtpTransceiverDirection RTCRtpTransceiverDirection_sendonly();
RTCRtpTransceiverDirection RTCRtpTransceiverDirection_recvonly();
RTCRtpTransceiverDirection RTCRtpTransceiverDirection_inactive();
RTCRtpTransceiverDirection RTCRtpTransceiverDirection_stopped();
DECLARE_EMLITE_TYPE(RTCDtlsTransportState, em_Val);
RTCDtlsTransportState RTCDtlsTransportState_new_();
RTCDtlsTransportState RTCDtlsTransportState_connecting();
RTCDtlsTransportState RTCDtlsTransportState_connected();
RTCDtlsTransportState RTCDtlsTransportState_closed();
RTCDtlsTransportState RTCDtlsTransportState_failed();
DECLARE_EMLITE_TYPE(RTCIceGathererState, em_Val);
RTCIceGathererState RTCIceGathererState_new_();
RTCIceGathererState RTCIceGathererState_gathering();
RTCIceGathererState RTCIceGathererState_complete();
DECLARE_EMLITE_TYPE(RTCIceTransportState, em_Val);
RTCIceTransportState RTCIceTransportState_closed();
RTCIceTransportState RTCIceTransportState_failed();
RTCIceTransportState RTCIceTransportState_disconnected();
RTCIceTransportState RTCIceTransportState_new_();
RTCIceTransportState RTCIceTransportState_checking();
RTCIceTransportState RTCIceTransportState_completed();
RTCIceTransportState RTCIceTransportState_connected();
DECLARE_EMLITE_TYPE(RTCIceRole, em_Val);
RTCIceRole RTCIceRole_unknown();
RTCIceRole RTCIceRole_controlling();
RTCIceRole RTCIceRole_controlled();
DECLARE_EMLITE_TYPE(RTCIceComponent, em_Val);
RTCIceComponent RTCIceComponent_rtp();
RTCIceComponent RTCIceComponent_rtcp();
DECLARE_EMLITE_TYPE(RTCSctpTransportState, em_Val);
RTCSctpTransportState RTCSctpTransportState_connecting();
RTCSctpTransportState RTCSctpTransportState_connected();
RTCSctpTransportState RTCSctpTransportState_closed();
DECLARE_EMLITE_TYPE(RTCDataChannelState, em_Val);
RTCDataChannelState RTCDataChannelState_connecting();
RTCDataChannelState RTCDataChannelState_open();
RTCDataChannelState RTCDataChannelState_closing();
RTCDataChannelState RTCDataChannelState_closed();
DECLARE_EMLITE_TYPE(RTCErrorDetailType, em_Val);
RTCErrorDetailType RTCErrorDetailType_data_channel_failure();
RTCErrorDetailType RTCErrorDetailType_dtls_failure();
RTCErrorDetailType RTCErrorDetailType_fingerprint_failure();
RTCErrorDetailType RTCErrorDetailType_sctp_failure();
RTCErrorDetailType RTCErrorDetailType_sdp_syntax_error();
RTCErrorDetailType RTCErrorDetailType_hardware_encoder_not_available();
RTCErrorDetailType RTCErrorDetailType_hardware_encoder_error();
DECLARE_EMLITE_TYPE(BinaryType, em_Val);
BinaryType BinaryType_blob();
BinaryType BinaryType_arraybuffer();
DECLARE_EMLITE_TYPE(WebTransportReliabilityMode, em_Val);
WebTransportReliabilityMode WebTransportReliabilityMode_pending();
WebTransportReliabilityMode WebTransportReliabilityMode_reliable_only();
WebTransportReliabilityMode WebTransportReliabilityMode_supports_unreliable();
DECLARE_EMLITE_TYPE(WebTransportCongestionControl, em_Val);
WebTransportCongestionControl WebTransportCongestionControl_default_();
WebTransportCongestionControl WebTransportCongestionControl_throughput();
WebTransportCongestionControl WebTransportCongestionControl_low_latency();
DECLARE_EMLITE_TYPE(DatagramsReadableMode, em_Val);
DatagramsReadableMode DatagramsReadableMode_bytes();
DECLARE_EMLITE_TYPE(WebTransportErrorSource, em_Val);
WebTransportErrorSource WebTransportErrorSource_stream();
WebTransportErrorSource WebTransportErrorSource_session();
DECLARE_EMLITE_TYPE(USBTransferStatus, em_Val);
USBTransferStatus USBTransferStatus_ok();
USBTransferStatus USBTransferStatus_stall();
USBTransferStatus USBTransferStatus_babble();
DECLARE_EMLITE_TYPE(USBRequestType, em_Val);
USBRequestType USBRequestType_standard();
USBRequestType USBRequestType_class_();
USBRequestType USBRequestType_vendor();
DECLARE_EMLITE_TYPE(USBRecipient, em_Val);
USBRecipient USBRecipient_device();
USBRecipient USBRecipient_interface();
USBRecipient USBRecipient_endpoint();
USBRecipient USBRecipient_other();
DECLARE_EMLITE_TYPE(USBDirection, em_Val);
USBDirection USBDirection_in();
USBDirection USBDirection_out();
DECLARE_EMLITE_TYPE(USBEndpointType, em_Val);
USBEndpointType USBEndpointType_bulk();
USBEndpointType USBEndpointType_interrupt();
USBEndpointType USBEndpointType_isochronous();
DECLARE_EMLITE_TYPE(AutoKeyword, em_Val);
AutoKeyword AutoKeyword_auto_();
DECLARE_EMLITE_TYPE(DirectionSetting, em_Val);
DirectionSetting DirectionSetting_none();
DirectionSetting DirectionSetting_rl();
DirectionSetting DirectionSetting_lr();
DECLARE_EMLITE_TYPE(LineAlignSetting, em_Val);
LineAlignSetting LineAlignSetting_start();
LineAlignSetting LineAlignSetting_center();
LineAlignSetting LineAlignSetting_end();
DECLARE_EMLITE_TYPE(PositionAlignSetting, em_Val);
PositionAlignSetting PositionAlignSetting_line_left();
PositionAlignSetting PositionAlignSetting_center();
PositionAlignSetting PositionAlignSetting_line_right();
PositionAlignSetting PositionAlignSetting_auto_();
DECLARE_EMLITE_TYPE(AlignSetting, em_Val);
AlignSetting AlignSetting_start();
AlignSetting AlignSetting_center();
AlignSetting AlignSetting_end();
AlignSetting AlignSetting_left();
AlignSetting AlignSetting_right();
DECLARE_EMLITE_TYPE(ScrollSetting, em_Val);
ScrollSetting ScrollSetting_none();
ScrollSetting ScrollSetting_up();
DECLARE_EMLITE_TYPE(XREnvironmentBlendMode, em_Val);
XREnvironmentBlendMode XREnvironmentBlendMode_opaque();
XREnvironmentBlendMode XREnvironmentBlendMode_alpha_blend();
XREnvironmentBlendMode XREnvironmentBlendMode_additive();
DECLARE_EMLITE_TYPE(XRInteractionMode, em_Val);
XRInteractionMode XRInteractionMode_screen_space();
XRInteractionMode XRInteractionMode_world_space();
DECLARE_EMLITE_TYPE(XRDepthType, em_Val);
XRDepthType XRDepthType_raw();
XRDepthType XRDepthType_smooth();
DECLARE_EMLITE_TYPE(XRDepthUsage, em_Val);
XRDepthUsage XRDepthUsage_cpu_optimized();
XRDepthUsage XRDepthUsage_gpu_optimized();
DECLARE_EMLITE_TYPE(XRDepthDataFormat, em_Val);
XRDepthDataFormat XRDepthDataFormat_luminance_alpha();
XRDepthDataFormat XRDepthDataFormat_float32();
XRDepthDataFormat XRDepthDataFormat_unsigned_short();
DECLARE_EMLITE_TYPE(XRDOMOverlayType, em_Val);
XRDOMOverlayType XRDOMOverlayType_screen();
XRDOMOverlayType XRDOMOverlayType_floating();
XRDOMOverlayType XRDOMOverlayType_head_locked();
DECLARE_EMLITE_TYPE(XRHandJoint, em_Val);
XRHandJoint XRHandJoint_wrist();
XRHandJoint XRHandJoint_thumb_metacarpal();
XRHandJoint XRHandJoint_thumb_phalanx_proximal();
XRHandJoint XRHandJoint_thumb_phalanx_distal();
XRHandJoint XRHandJoint_thumb_tip();
XRHandJoint XRHandJoint_index_finger_metacarpal();
XRHandJoint XRHandJoint_index_finger_phalanx_proximal();
XRHandJoint XRHandJoint_index_finger_phalanx_intermediate();
XRHandJoint XRHandJoint_index_finger_phalanx_distal();
XRHandJoint XRHandJoint_index_finger_tip();
XRHandJoint XRHandJoint_middle_finger_metacarpal();
XRHandJoint XRHandJoint_middle_finger_phalanx_proximal();
XRHandJoint XRHandJoint_middle_finger_phalanx_intermediate();
XRHandJoint XRHandJoint_middle_finger_phalanx_distal();
XRHandJoint XRHandJoint_middle_finger_tip();
XRHandJoint XRHandJoint_ring_finger_metacarpal();
XRHandJoint XRHandJoint_ring_finger_phalanx_proximal();
XRHandJoint XRHandJoint_ring_finger_phalanx_intermediate();
XRHandJoint XRHandJoint_ring_finger_phalanx_distal();
XRHandJoint XRHandJoint_ring_finger_tip();
XRHandJoint XRHandJoint_pinky_finger_metacarpal();
XRHandJoint XRHandJoint_pinky_finger_phalanx_proximal();
XRHandJoint XRHandJoint_pinky_finger_phalanx_intermediate();
XRHandJoint XRHandJoint_pinky_finger_phalanx_distal();
XRHandJoint XRHandJoint_pinky_finger_tip();
DECLARE_EMLITE_TYPE(XRHitTestTrackableType, em_Val);
XRHitTestTrackableType XRHitTestTrackableType_point();
XRHitTestTrackableType XRHitTestTrackableType_plane();
XRHitTestTrackableType XRHitTestTrackableType_mesh();
DECLARE_EMLITE_TYPE(XRReflectionFormat, em_Val);
XRReflectionFormat XRReflectionFormat_srgba8();
XRReflectionFormat XRReflectionFormat_rgba16f();
DECLARE_EMLITE_TYPE(XRPlaneOrientation, em_Val);
XRPlaneOrientation XRPlaneOrientation_horizontal();
XRPlaneOrientation XRPlaneOrientation_vertical();
DECLARE_EMLITE_TYPE(XRSessionMode, em_Val);
XRSessionMode XRSessionMode_inline_();
XRSessionMode XRSessionMode_immersive_vr();
XRSessionMode XRSessionMode_immersive_ar();
DECLARE_EMLITE_TYPE(XRVisibilityState, em_Val);
XRVisibilityState XRVisibilityState_visible();
XRVisibilityState XRVisibilityState_visible_blurred();
XRVisibilityState XRVisibilityState_hidden();
DECLARE_EMLITE_TYPE(XRReferenceSpaceType, em_Val);
XRReferenceSpaceType XRReferenceSpaceType_viewer();
XRReferenceSpaceType XRReferenceSpaceType_local();
XRReferenceSpaceType XRReferenceSpaceType_local_floor();
XRReferenceSpaceType XRReferenceSpaceType_bounded_floor();
XRReferenceSpaceType XRReferenceSpaceType_unbounded();
DECLARE_EMLITE_TYPE(XREye, em_Val);
XREye XREye_none();
XREye XREye_left();
XREye XREye_right();
DECLARE_EMLITE_TYPE(XRHandedness, em_Val);
XRHandedness XRHandedness_none();
XRHandedness XRHandedness_left();
XRHandedness XRHandedness_right();
DECLARE_EMLITE_TYPE(XRTargetRayMode, em_Val);
XRTargetRayMode XRTargetRayMode_gaze();
XRTargetRayMode XRTargetRayMode_tracked_pointer();
XRTargetRayMode XRTargetRayMode_screen();
XRTargetRayMode XRTargetRayMode_transient_pointer();
DECLARE_EMLITE_TYPE(XRLayerLayout, em_Val);
XRLayerLayout XRLayerLayout_default_();
XRLayerLayout XRLayerLayout_mono();
XRLayerLayout XRLayerLayout_stereo();
XRLayerLayout XRLayerLayout_stereo_left_right();
XRLayerLayout XRLayerLayout_stereo_top_bottom();
DECLARE_EMLITE_TYPE(XRLayerQuality, em_Val);
XRLayerQuality XRLayerQuality_default_();
XRLayerQuality XRLayerQuality_text_optimized();
XRLayerQuality XRLayerQuality_graphics_optimized();
DECLARE_EMLITE_TYPE(XRTextureType, em_Val);
XRTextureType XRTextureType_texture();
XRTextureType XRTextureType_texture_array();
DECLARE_EMLITE_TYPE(SummarizerType, em_Val);
SummarizerType SummarizerType_tldr();
SummarizerType SummarizerType_teaser();
SummarizerType SummarizerType_key_points();
SummarizerType SummarizerType_headline();
DECLARE_EMLITE_TYPE(SummarizerFormat, em_Val);
SummarizerFormat SummarizerFormat_plain_text();
SummarizerFormat SummarizerFormat_markdown();
DECLARE_EMLITE_TYPE(SummarizerLength, em_Val);
SummarizerLength SummarizerLength_short_();
SummarizerLength SummarizerLength_medium();
SummarizerLength SummarizerLength_long_();
DECLARE_EMLITE_TYPE(WriterTone, em_Val);
WriterTone WriterTone_formal();
WriterTone WriterTone_neutral();
WriterTone WriterTone_casual();
DECLARE_EMLITE_TYPE(WriterFormat, em_Val);
WriterFormat WriterFormat_plain_text();
WriterFormat WriterFormat_markdown();
DECLARE_EMLITE_TYPE(WriterLength, em_Val);
WriterLength WriterLength_short_();
WriterLength WriterLength_medium();
WriterLength WriterLength_long_();
DECLARE_EMLITE_TYPE(RewriterTone, em_Val);
RewriterTone RewriterTone_as_is();
RewriterTone RewriterTone_more_formal();
RewriterTone RewriterTone_more_casual();
DECLARE_EMLITE_TYPE(RewriterFormat, em_Val);
RewriterFormat RewriterFormat_as_is();
RewriterFormat RewriterFormat_plain_text();
RewriterFormat RewriterFormat_markdown();
DECLARE_EMLITE_TYPE(RewriterLength, em_Val);
RewriterLength RewriterLength_as_is();
RewriterLength RewriterLength_shorter();
RewriterLength RewriterLength_longer();
DECLARE_EMLITE_TYPE(Availability, em_Val);
Availability Availability_unavailable();
Availability Availability_downloadable();
Availability Availability_downloading();
Availability Availability_available();
DECLARE_EMLITE_TYPE(XMLHttpRequestResponseType, em_Val);
XMLHttpRequestResponseType XMLHttpRequestResponseType_none();
XMLHttpRequestResponseType XMLHttpRequestResponseType_arraybuffer();
XMLHttpRequestResponseType XMLHttpRequestResponseType_blob();
XMLHttpRequestResponseType XMLHttpRequestResponseType_document();
XMLHttpRequestResponseType XMLHttpRequestResponseType_json();
XMLHttpRequestResponseType XMLHttpRequestResponseType_text();

#ifdef __cplusplus
}
#endif
